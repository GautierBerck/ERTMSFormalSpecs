<Frame
 CycleDuration="0.1"
 Name="Speed restriction to ensure permitted braking distance - Functional tests"
>
<SubSequences>
<SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Send + store PBD message"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Test case1"
>
<ReqRef
 Id="c0212afe-50dc-4499-9f13-e6a734ef08fe"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><ReqRef
 Id="0c087a57-86f8-4190-81b9-2698efc3cc18"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><ReqRef
 Id="7286d7a7-e1e5-4269-ae7b-f3e6ff5a129f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
<Comment></Comment>
</ReqRef><Comment>packets 65 and 141 are relevant? NO
we need packet number 52
pbd sr</Comment>
<Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step1 - Setup"
>
<Comment></Comment>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Set Initial values"
>
<Comment>refer to 3.11.11.7</Comment>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.LRBG&lt;- BTM.BaliseGroup
{
    NID=&gt;9616,
    Orientation=&gt;Orientation.Nominal,
    Position=&gt;BTM.Position
    {
        OverReadingAmountOdo=&gt;12.0,
        Position=&gt;11000.0,
        UnderReadingAmountOdo=&gt;11.0
    }
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step3 - Send out PBD message"
>
<Comment>Q_FRONT could be Messages.Q_FRONT.No_train_length_delay_on_validity_end_point_of_profile_element</Comment>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN =&gt; Messages.Q_UPDOWN.Down_link_telegram,
    M_VERSION =&gt; 0,
    Q_MEDIA =&gt; Messages.Q_MEDIA.Balise,
    N_PIG =&gt; 0,
    N_TOTAL =&gt; 0,
    M_DUP =&gt; Messages.M_DUP.No_duplicates,
    M_MCOUNT =&gt; 0,
    NID_C =&gt; 0,
    NID_BG =&gt; 9616,
    Q_LINK =&gt; Messages.Q_LINK.Unlinked,
    Sequence1 =&gt; [
    Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN =&gt; Messages.PACKET.TRACK_TO_TRAIN.Message
            {
            PERMITTED_BRAKING_DISTANCE_INFORMATION =&gt;
            Messages.PACKET.TRACK_TO_TRAIN.PERMITTED_BRAKING_DISTANCE_INFORMATION.Message
                {
                Q_DIR =&gt; Messages.Q_DIR.Nominal,
                L_PACKET =&gt; 0,
                Q_SCALE =&gt; Messages.Q_SCALE._1_m_scaleC,
                Q_TRACKINIT =&gt; Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow,
                D_PBD =&gt; 2000,
                Q_GDIR =&gt; Messages.Q_GDIR.uphill,
                G_PBDSR =&gt; 10,
                Q_PBDSR =&gt; Messages.Q_PBDSR.SB_intervention_requested,
                D_PBDSR =&gt; 1000,
                L_PBDSR =&gt; 5000,
                N_ITER =&gt; 1,
                Sequence1 =&gt; [
                  Messages.PACKET.TRACK_TO_TRAIN.PERMITTED_BRAKING_DISTANCE_INFORMATION.SubStructure1 {
                    D_PBD =&gt; 3000,
                    Q_GDIR =&gt; Messages.Q_GDIR.downhill,
                    G_PBDSR =&gt; 20,
                    Q_PBDSR =&gt; Messages.Q_PBDSR.EB_intervention_requested,
                    D_PBDSR =&gt; 2000,
                    L_PBDSR =&gt; 6000
                  }
                ]
                }
            }
        }
       ]
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step4 - Check that PBD values are stored correctly"
>
<Comment>The value of &quot;Speed&quot; is not tested here because it is the result of an internal calculation inside the Kernel (and hence not explicitly set in the the BTM.Message)</Comment>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == 10.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 5000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 1000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.SB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 2000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.EB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 3000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == -20.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 6000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 2000.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence><SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Check initial state"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Test case1"
>
<ReqRef
 Id="c0212afe-50dc-4499-9f13-e6a734ef08fe"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><ReqRef
 Id="1be737d0-fb4e-4643-926f-c5fcada702d0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><Comment></Comment>
<Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment(
)</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Check for absence of restrictions"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions == []</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictions(
    Distance=&gt;0.0
) == Default.BaseTypes.Speed.MaxSpeed</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence><SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Values of new packet overwrite values from old packet"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Test case1 - Complete replacement"
>
<ReqRef
 Id="90d5e9cb-5620-45e8-a0aa-6018093e3100"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment(
)</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Initialize Kernel with PBD values"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions &lt;- 
 [
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 100.0,
     Gradient =&gt; 0.0,
     Length =&gt; 1000.0,
     Location =&gt; 10000.0
    },
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 200.0,
     Gradient =&gt; 10.0,
     Length =&gt; 2000.0,
     Location =&gt; 20000.0
    },
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 300.0,
     Gradient =&gt; 20.0,
     Length =&gt; 30000.0,
     Location =&gt; 30000.0
    }
]</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions) == 3</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Send out PBD message"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN =&gt; Messages.Q_UPDOWN.Down_link_telegram,
    M_VERSION =&gt; 0,
    Q_MEDIA =&gt; Messages.Q_MEDIA.Balise,
    N_PIG =&gt; 0,
    N_TOTAL =&gt; 0,
    M_DUP =&gt; Messages.M_DUP.No_duplicates,
    M_MCOUNT =&gt; 0,
    NID_C =&gt; 0,
    NID_BG =&gt; 9616,
    Q_LINK =&gt; Messages.Q_LINK.Unlinked,
    Sequence1 =&gt; [
    Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN =&gt; Messages.PACKET.TRACK_TO_TRAIN.Message
            {
            PERMITTED_BRAKING_DISTANCE_INFORMATION =&gt;
            Messages.PACKET.TRACK_TO_TRAIN.PERMITTED_BRAKING_DISTANCE_INFORMATION.Message
                {
                Q_DIR =&gt; Messages.Q_DIR.Nominal,
                L_PACKET =&gt; 0,
                Q_SCALE =&gt; Messages.Q_SCALE._1_m_scaleC,
                Q_TRACKINIT =&gt; Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow,
                D_PBD =&gt; 2000,
                Q_GDIR =&gt; Messages.Q_GDIR.uphill,
                G_PBDSR =&gt; 10,
                Q_PBDSR =&gt; Messages.Q_PBDSR.SB_intervention_requested,
                D_PBDSR =&gt; 1000,
                L_PBDSR =&gt; 5000,
                N_ITER =&gt; 0
                }
            }
        }
       ]
}</Action><Action>BTM.LRBG&lt;- BTM.BaliseGroup
{
    NID=&gt;9616,
    Orientation=&gt;Orientation.Nominal,
    Position=&gt;BTM.Position
    {
        OverReadingAmountOdo=&gt;12.0,
        Position=&gt;11000.0,
        UnderReadingAmountOdo=&gt;11.0
    }
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Check that PBD message has overwritten old values"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions) == 1</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.SB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 2000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == 10.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 5000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 1000.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase><TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Test case2 - Partial replacement"
>
<ReqRef
 Id="90d5e9cb-5620-45e8-a0aa-6018093e3100"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment(

)</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Initialize Kernel with PBD values"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions &lt;- 
 [
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 100.0,
     Gradient =&gt; 0.0,
     Length =&gt; 1000.0,
     Location =&gt; 10000.0
    },
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 200.0,
     Gradient =&gt; 10.0,
     Length =&gt; 2000.0,
     Location =&gt; 20000.0
    },
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 300.0,
     Gradient =&gt; 20.0,
     Length =&gt; 30000.0,
     Location =&gt; 30000.0
    }
]</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions) == 3</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Send out PBD message"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN =&gt; Messages.Q_UPDOWN.Down_link_telegram,
    M_VERSION =&gt; 0,
    Q_MEDIA =&gt; Messages.Q_MEDIA.Balise,
    N_PIG =&gt; 0,
    N_TOTAL =&gt; 0,
    M_DUP =&gt; Messages.M_DUP.No_duplicates,
    M_MCOUNT =&gt; 0,
    NID_C =&gt; 0,
    NID_BG =&gt; 9616,
    Q_LINK =&gt; Messages.Q_LINK.Unlinked,
    Sequence1 =&gt; [
    Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN =&gt; Messages.PACKET.TRACK_TO_TRAIN.Message
            {
            PERMITTED_BRAKING_DISTANCE_INFORMATION =&gt;
            Messages.PACKET.TRACK_TO_TRAIN.PERMITTED_BRAKING_DISTANCE_INFORMATION.Message
                {
                Q_DIR =&gt; Messages.Q_DIR.Nominal,
                L_PACKET =&gt; 0,
                Q_SCALE =&gt; Messages.Q_SCALE._1_m_scaleC,
                Q_TRACKINIT =&gt; Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow,
                D_PBD =&gt; 2000,
                Q_GDIR =&gt; Messages.Q_GDIR.uphill,
                G_PBDSR =&gt; 10,
                Q_PBDSR =&gt; Messages.Q_PBDSR.SB_intervention_requested,
                D_PBDSR =&gt; 19999,
                L_PBDSR =&gt; 2000,
                N_ITER =&gt; 0
                }
            }
        }
       ]
}</Action><Action>BTM.LRBG&lt;- BTM.BaliseGroup
{
    NID=&gt;9616,
    Orientation=&gt;Orientation.Nominal,
    Position=&gt;BTM.Position
    {
        OverReadingAmountOdo=&gt;12.0,
        Position=&gt;11000.0,
        UnderReadingAmountOdo=&gt;11.0
    }
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Check that PBD message has overwritten old values"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions) == 2</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.SB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 100.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == 0.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 1000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 10000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.SB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 2000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == 10.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 19999.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 2000.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase><TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Test case3 - No replacement"
>
<ReqRef
 Id="90d5e9cb-5620-45e8-a0aa-6018093e3100"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
>
</ReqRef><Comment>Since we are pushing preexisting values directly into the kernel (step2) we cannot verify if a balise message with the same N_PIG actually overwrites values of an old message with the same N_PIG. But it can be shown that old values are kept and new ones are simply added.</Comment>
<Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment(

)</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Initialize Kernel with PBD values"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions &lt;- 
 [
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 100.0,
     Gradient =&gt; 0.0,
     Length =&gt; 1000.0,
     Location =&gt; 10000.0
    },
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 200.0,
     Gradient =&gt; 10.0,
     Length =&gt; 2000.0,
     Location =&gt; 20000.0
    },
     Kernel.TrackDescription.PermittedBrakingDistance.SRPB {
     BrakeType =&gt; Messages.Q_PBDSR.SB_intervention_requested,
     BrakingDistance =&gt; 300.0,
     Gradient =&gt; 20.0,
     Length =&gt; 3000.0,
     Location =&gt; 30000.0
    }
]</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions) == 3</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Send out PBD message"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN =&gt; Messages.Q_UPDOWN.Down_link_telegram,
    M_VERSION =&gt; 0,
    Q_MEDIA =&gt; Messages.Q_MEDIA.Balise,
    N_PIG =&gt; 0,
    N_TOTAL =&gt; 0,
    M_DUP =&gt; Messages.M_DUP.No_duplicates,
    M_MCOUNT =&gt; 0,
    NID_C =&gt; 0,
    NID_BG =&gt; 9616,
    Q_LINK =&gt; Messages.Q_LINK.Unlinked,
    Sequence1 =&gt; [
    Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN =&gt; Messages.PACKET.TRACK_TO_TRAIN.Message
            {
            PERMITTED_BRAKING_DISTANCE_INFORMATION =&gt;
            Messages.PACKET.TRACK_TO_TRAIN.PERMITTED_BRAKING_DISTANCE_INFORMATION.Message
                {
                Q_DIR =&gt; Messages.Q_DIR.Nominal,
                L_PACKET =&gt; 0,
                Q_SCALE =&gt; Messages.Q_SCALE._1_m_scaleC,
                Q_TRACKINIT =&gt; Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow,
                D_PBD =&gt; 400,
                Q_GDIR =&gt; Messages.Q_GDIR.uphill,
                G_PBDSR =&gt; 10,
                Q_PBDSR =&gt; Messages.Q_PBDSR.SB_intervention_requested,
                D_PBDSR =&gt; 30001,
                L_PBDSR =&gt; 2000,
                N_ITER =&gt; 0
                }
            }
        }
       ]
}</Action><Action>BTM.LRBG&lt;- BTM.BaliseGroup
{
    NID=&gt;9616,
    Orientation=&gt;Orientation.Nominal,
    Position=&gt;BTM.Position
    {
        OverReadingAmountOdo=&gt;12.0,
        Position=&gt;11000.0,
        UnderReadingAmountOdo=&gt;11.0
    }
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Check that PBD message has overwritten no old values"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions) == 4</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.SB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 100.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == 0.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 1000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 10000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakeType == Messages.Q_PBDSR.SB_intervention_requested</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).BrakingDistance == 400.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Gradient == 10.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Location == 30001.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions).Length == 2000.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence></SubSequences>
</Frame>

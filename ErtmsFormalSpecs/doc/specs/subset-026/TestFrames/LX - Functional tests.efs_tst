<Frame
 CycleDuration="Kernel.CycleDuration"
 Name="LX - Functional tests"
>
<SubSequences>
<SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Several LXs received"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Several LXs received"
>
<ReqRef
 Id="3.11.2.2.i"
>
</ReqRef><ReqRef
 Id="3.12.5.2"
>
</ReqRef><ReqRef
 Id="3.12.5.1"
>
</ReqRef><ReqRef
 Id="7.4.2.26.1.bis"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step2 - A protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;18,
                    D_LX=&gt;3000,
                    L_LX=&gt;50,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_protected,
                    V_LX=&gt;0,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action><Action>Kernel.LX.LevelCrossings &lt;- []</Action><Action>BTM.LRBG &lt;- BTM.BaliseGroup
{
    NID =&gt; 9621,
    Orientation =&gt; Orientation.Nominal,
    Position =&gt; BTM.Position
    {
        OverReadingAmountOdo =&gt; 27.0,
        Position =&gt; 3000.0,
        UnderReadingAmountOdo =&gt; 24.0
    }
}</Action><Action>Odometry.NominalDistance &lt;- 3500.0</Action><Action>Kernel.TrainPosition.Position.DirectionalPositionInformation.TrainOrientation &lt;- Default.Orientation.Nominal</Action><Action>Odometry.Accuracy &lt;- Odometry.OdometerAccuracy 
{
    D_ura =&gt; 42.0,
    D_ora =&gt; 38.0,
    V_ora =&gt; 0.0,
    V_ura =&gt; 0.0
}</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.LevelCrossings != []</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3020.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 4000.0 ) &gt;= 150.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step3 - A non protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2126,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Both_directions,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;20,
                    D_LX=&gt;2000,
                    L_LX=&gt;100,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;8,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2000.0 ) == 40.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2099.0 ) == 40.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3020.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 4000.0 ) &gt;= 150.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step4 - A non protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2128,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;22,
                    D_LX=&gt;2500,
                    L_LX=&gt;40,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;4,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.Stop_required,
                    L_STOPLX=&gt;50
                }
            }
        }
    ]
}</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2000.0 ) == 40.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2099.0 ) == 40.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2450.0 ) == 0.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2500.0 ) == 20.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2539.0 ) == 20.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2540.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3020.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 4000.0 ) &gt;= 150.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase><TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="New LX information with same id replaces old information"
>
<ReqRef
 Id="3.12.5.3"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step2 - A protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;18,
                    D_LX=&gt;3000,
                    L_LX=&gt;50,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_protected,
                    V_LX=&gt;0,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action><Action>Kernel.LX.LevelCrossings &lt;- []</Action><Action>BTM.LRBG &lt;- BTM.BaliseGroup
{
    NID =&gt; 9621,
    Orientation =&gt; Orientation.Nominal,
    Position =&gt; BTM.Position
    {
        OverReadingAmountOdo =&gt; 7.0,
        Position =&gt; 3000.0,
        UnderReadingAmountOdo =&gt; 4.0
    }
}</Action><Action>Odometry.NominalDistance &lt;- 3500.0</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>(COUNT Kernel.LX.LevelCrossings) == 1</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).Location == 3000.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step3 - Another protected level crossing is received which should overwrite the old one"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;18,
                    D_LX=&gt;4000,
                    L_LX=&gt;50,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_protected,
                    V_LX=&gt;0,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action></Actions>
</SubStep><SubStep
 Name="Sub-step2"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.LX.LevelCrossings) == 1</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).Location == 4000.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence><SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Non protected LX received, no stopping required"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Non protected LX received, no stopping required"
>
<ReqRef
 Id="3.11.2.2.i"
>
</ReqRef><ReqRef
 Id="3.12.5.2"
>
</ReqRef><ReqRef
 Id="3.11.9.1"
>
</ReqRef><ReqRef
 Id="3.12.5.1"
>
</ReqRef><ReqRef
 Id="7.4.2.26.1.bis"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step2 - A non protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2126,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Both_directions,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;20,
                    D_LX=&gt;800,
                    L_LX=&gt;100,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;8,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action><Action>Kernel.LX.LevelCrossings &lt;- []</Action><Action>Odometry.NominalDistance &lt;- 2500.0</Action><Action>BTM.LRBG&lt;- BTM.BaliseGroup
{
    NID=&gt;9618,
    Orientation=&gt;Orientation.Nominal,
    Position=&gt;BTM.Position
    {
        OverReadingAmountOdo=&gt;6.0,
        Position=&gt;2000.0,
        UnderReadingAmountOdo=&gt;2.0
    }
}</Action><Action>Kernel.TrainPosition.Position.DirectionalPositionInformation.TrainOrientation &lt;- Default.Orientation.Nominal</Action><Action>Odometry.Accuracy &lt;- Odometry.OdometerAccuracy 
{
    D_ura =&gt; 15.0,
    D_ora =&gt; 14.0,
    V_ora =&gt; 0.0,
    V_ura =&gt; 0.0
}</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.LevelCrossings != []</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step3 - LX data check"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Id == 20</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).LRBG == 2126</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Location == 800.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Length == 100.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_not_protected</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Speed == 40.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).StoppingRequired == Messages.Q_STOPLX.No_stop_required</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step4 - Speed restrictions check"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 899.0 ) == 40.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 500.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 900.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 800.0 ) == 40.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence><SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Non protected LX received, stopping required"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Non protected LX, received, stopping required"
>
<ReqRef
 Id="3.11.2.2.i"
>
</ReqRef><ReqRef
 Id="3.12.5.2"
>
</ReqRef><ReqRef
 Id="3.11.9.1"
>
</ReqRef><ReqRef
 Id="3.12.5.1"
>
</ReqRef><ReqRef
 Id="7.4.2.26.1.bis"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step2 - A non protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2128,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;22,
                    D_LX=&gt;1200,
                    L_LX=&gt;240,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;10,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.Stop_required,
                    L_STOPLX=&gt;70
                }
            }
        }
    ]
}</Action><Action>Kernel.LX.LevelCrossings &lt;- []</Action><Action>BTM.LRBG&lt;- BTM.BaliseGroup
{
    NID=&gt;9619,
    Orientation=&gt;Orientation.Nominal,
    Position=&gt;BTM.Position
    {
        OverReadingAmountOdo=&gt;16.0,
        Position=&gt;2200.0,
        UnderReadingAmountOdo=&gt;14.0
    }
}</Action><Action>Odometry.NominalDistance &lt;- 2700.0</Action><Action>Kernel.TrainPosition.Position.DirectionalPositionInformation.TrainOrientation &lt;- Default.Orientation.Nominal</Action><Action>Odometry.Accuracy &lt;- Odometry.OdometerAccuracy 
{
    D_ura =&gt; 24.0,
    D_ora =&gt; 29.0,
    V_ora =&gt; 0.0,
    V_ura =&gt; 0.0
}</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.LevelCrossings != []</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step3 - LX data check"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Id == 22</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).LRBG == 2128</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Location == 1200.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Length == 240.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_not_protected</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Speed == 50.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).StoppingRequired == Messages.Q_STOPLX.Stop_required</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).StoppingAreaLength == 70.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step4 - Speed restrictions check"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1200.0 ) == 50.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1400.0 ) == 50.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1130.0 ) == 0.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1440.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1500.0 ) &gt;= 150.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence><SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Protected LX received"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="Protected LX received"
>
<ReqRef
 Id="3.11.2.2.i"
>
</ReqRef><ReqRef
 Id="3.12.5.2"
>
</ReqRef><ReqRef
 Id="3.12.5.1"
>
</ReqRef><ReqRef
 Id="7.4.2.26.1.bis"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step2 - A protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;18,
                    D_LX=&gt;1000,
                    L_LX=&gt;50,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_protected,
                    V_LX=&gt;0,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action><Action>Kernel.LX.LevelCrossings &lt;- []</Action><Action>BTM.LRBG &lt;- BTM.BaliseGroup
{
    NID =&gt; 9620,
    Orientation =&gt; Orientation.Nominal,
    Position =&gt; BTM.Position
    {
        OverReadingAmountOdo =&gt; 44.0,
        Position =&gt; 2600.0,
        UnderReadingAmountOdo =&gt; 41.0
    }
}</Action><Action>Odometry.NominalDistance &lt;- 3100.0</Action><Action>Kernel.TrainPosition.Position.DirectionalPositionInformation.TrainOrientation &lt;- Default.Orientation.Nominal</Action><Action>Odometry.Accuracy &lt;- Odometry.OdometerAccuracy 
{
    D_ura =&gt; 54.0,
    D_ora =&gt; 52.0,
    V_ora =&gt; 0.0,
    V_ura =&gt; 0.0
}</Action></Actions>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.LevelCrossings != []</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step3 - LX data check"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Id == 18</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).LRBG == 2124</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Location == 1000.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).Length == 50.0</Expectation><Expectation
 Kind="Instantaneous"
>(FIRST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_protected</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step4 - Speed restrictions check"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 2000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 3000.0 ) &gt;= 150.0</Expectation><Expectation
 Kind="Instantaneous"
>Kernel.LX.SpeedRestrictions ( 1000.0 ) &gt;= 150.0</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence><SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="LX data storage"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="protected + non-protected LX"
>
<ReqRef
 Id="3.12.5.4"
>
</ReqRef><ReqRef
 Id="3.12.5.5"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Initialize test-data"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.LX.LevelCrossings &lt;- []</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step3 - A protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;7,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;18,
                    D_LX=&gt;1000,
                    L_LX=&gt;50,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_protected,
                    V_LX=&gt;0,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step4 - A non-protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;19,
                    D_LX=&gt;2000,
                    L_LX=&gt;100,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;0,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step5 - Check if the information is correctly stored"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).Id == 18</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_protected</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).Length == 50.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).Location == 1000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_not_protected</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.LX.LevelCrossings).Length == 100.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.LX.LevelCrossings).Location == 2000.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(LAST_IN Kernel.LX.LevelCrossings).Id == 19</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(COUNT Kernel.LX.LevelCrossings) == 2</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase><TestCase
 Feature="0"
 Case="0"
 Implemented="TRUE"
 Name="non-protected LX"
>
<ReqRef
 Id="3.12.5.6"
>
</ReqRef><ReqRef
 Id="3.12.5.7"
>
</ReqRef><ReqRef
 Id="3.12.5.6.a"
>
</ReqRef><ReqRef
 Id="3.12.5.6.b"
>
</ReqRef><Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1 - Setup"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.InitializeTestEnvironment()</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step2 - Initialize test-data"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>Kernel.LX.LevelCrossings &lt;- []</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step3 - A non-protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;20,
                    D_LX=&gt;2000,
                    L_LX=&gt;100,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;4,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.No_stop_required,
                    L_STOPLX=&gt;0
                }
            }
        }
    ]
}</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step4 - Check for speed and absence of stopping requirement"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).Speed == 20.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).StoppingRequired == Messages.Q_STOPLX.No_stop_required</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_not_protected</Expectation></Expectations>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step5 - Another non-protected level crossing is received"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Actions>
<Action>BTM.Message &lt;- Messages.EUROBALISE.Message
{
    Q_UPDOWN=&gt; Messages.Q_UPDOWN.Up_link_telegram,
    M_VERSION=&gt;1,
    Q_MEDIA=&gt;Messages.Q_MEDIA.Balise,
    N_PIG=&gt;8,
    N_TOTAL=&gt;0,
    M_DUP=&gt;Messages.M_DUP.No_duplicates,
    M_MCOUNT=&gt;4,
    NID_C=&gt;140,
    NID_BG=&gt;2124,
    Q_LINK=&gt;Messages.Q_LINK.Linked,
    Sequence1=&gt;
    [
        Messages.EUROBALISE.SubStructure1
        {
            TRACK_TO_TRAIN=&gt;Messages.PACKET.TRACK_TO_TRAIN.Message
            {
                LEVEL_CROSSING_INFORMATION=&gt;Messages.PACKET.TRACK_TO_TRAIN.LEVEL_CROSSING_INFORMATION.Message
                {
                    NID_PACKET=&gt;88,
                    Q_DIR=&gt;Messages.Q_DIR.Nominal,
                    L_PACKET=&gt;400,
                    Q_SCALE=&gt;Messages.Q_SCALE._1_m_scaleC,
                    NID_LX=&gt;20,
                    D_LX=&gt;2000,
                    L_LX=&gt;100,
                    Q_LXSTATUS=&gt;Messages.Q_LXSTATUS.LX_is_not_protected,
                    V_LX=&gt;10,
                    Q_STOPLX=&gt;Messages.Q_STOPLX.Stop_required,
                    L_STOPLX=&gt;100
                }
            }
        }
    ]
}</Action><Action>Kernel.LX.LevelCrossings &lt;- []</Action></Actions>
</SubStep></SubSteps>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 TranslationRequired="FALSE"
 Name="Step6 - Check for presence of stopping requirement and associated stopping area"
>
<SubSteps>
<SubStep
 Name="Sub-step1"
>
<Expectations>
<Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).StoppingRequired == Messages.Q_STOPLX.Stop_required</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).StoppingAreaLength == 100.0</Expectation><Expectation
 Kind="Instantaneous"
 DeadLine="1"
>(FIRST_IN Kernel.LX.LevelCrossings).IsProtected == Messages.Q_LXSTATUS.LX_is_not_protected</Expectation></Expectations>
</SubStep></SubSteps>
</Step></Steps>
</TestCase></TestCases>
</SubSequence></SubSequences>
</Frame>

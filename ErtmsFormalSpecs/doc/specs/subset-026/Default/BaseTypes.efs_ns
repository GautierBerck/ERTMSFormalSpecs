<NameSpace
 Name="BaseTypes"
>
<NameSpaces>
</NameSpaces>
<Ranges>
<Range
 MinValue="-2147483647.0"
 MaxValue="2147483648.0"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Distance"
>
<Comment>Expressed in m</Comment>
<SpecialValues>
<EnumValue
 Value="2147483648.0"
 Name="Infinity"
>
</EnumValue><EnumValue
 Value="2147483647.0"
 Name="Unknown"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="-32768.0"
 MaxValue="32771.0"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Speed"
>
<Comment>Expressed in km/h</Comment>
<SpecialValues>
<EnumValue
 Value="32769.0"
 Name="NA"
>
</EnumValue><EnumValue
 Value="32768.0"
 Name="Infinity"
>
</EnumValue><EnumValue
 Value="200.0"
 Name="MaxSpeed"
>
</EnumValue><EnumValue
 Value="32770.0"
 Name="ComputeReleaseSpeedOnBoard"
>
</EnumValue><EnumValue
 Value="32771.0"
 Name="UseNVForReleaseSpeed"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="0"
 MaxValue="9999999999"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Time"
>
<Comment></Comment>
<SpecialValues>
<EnumValue
 Value="9999999999.0"
 Name="Infinity"
>
</EnumValue><EnumValue
 Value="9999999998.0"
 Name="NA"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="0.0"
 MaxValue="32769.0"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Length"
>
<Comment>Expressed in m</Comment>
<SpecialValues>
<EnumValue
 Value="32769.0"
 Name="NA"
>
</EnumValue><EnumValue
 Value="32768.0"
 Name="Infinity"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="0.0"
 MaxValue="100.0"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Gradient"
>
<Comment></Comment>
<SpecialValues>
<EnumValue
 Value="100.0"
 Name="Indefinite"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="-32769"
 MaxValue="32769"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Acceleration"
>
<Comment>Expressed in m/s/s</Comment>
<SpecialValues>
<EnumValue
 Value="32769.0"
 Name="NA"
>
</EnumValue><EnumValue
 Value="32768.0"
 Name="Infinity"
>
</EnumValue><EnumValue
 Value="9.81"
 Name="g"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="0"
 MaxValue="32767"
 Precision="IntegerPrecision"
 Default="0"
 NeedsRequirement="FALSE"
 Name="Number"
>
<Comment></Comment>
</Range><Range
 MinValue="0"
 MaxValue="32767"
 Precision="IntegerPrecision"
 Default="0"
 NeedsRequirement="FALSE"
 Name="Qualifier"
>
<Comment></Comment>
</Range><Range
 MinValue="0"
 MaxValue="65535"
 Precision="IntegerPrecision"
 Default="0"
 NeedsRequirement="FALSE"
 Name="IdentityNumber"
>
<Comment></Comment>
</Range></Ranges>
<Functions>
<Function
 Type="BaseTypes.Length"
 NeedsRequirement="FALSE"
 Name="DistanceToLength"
>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Valid length"
>
<PreConditions>
<PreCondition>Distance &lt; 32768.0</PreCondition><PreCondition>Distance &gt;= 0.0</PreCondition></PreConditions>
<Expression>Length(Distance)</Expression>
</Case><Case
 Name="SpecialValue_Infinity"
>
<PreConditions>
<PreCondition>Distance == 2147483648.0</PreCondition></PreConditions>
<Expression>32768.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 NeedsRequirement="FALSE"
 Name="LengthToDistance"
>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Length"
 Name="Length"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="SpecialValue_Infinity"
>
<PreConditions>
<PreCondition>Length &gt;= Length.Infinity</PreCondition></PreConditions>
<Expression>Distance.Infinity</Expression>
</Case><Case
 Name="Valid distance"
>
<PreConditions>
<PreCondition>Length &gt;= 0.0</PreCondition><PreCondition>Length &lt; 32768.0</PreCondition></PreConditions>
<Expression>Distance(Length)</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 NeedsRequirement="FALSE"
 Name="QualifierToLength"
>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Qualifier"
 Name="Qualifier"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="ValidQualifier"
>
<PreConditions>
<PreCondition>Qualifier &gt;= 0</PreCondition><PreCondition>Qualifier &lt; 32768</PreCondition></PreConditions>
<Expression>Length(Qualifier)</Expression>
</Case></Cases>
</Function><Function
 Type="Gradient"
 NeedsRequirement="FALSE"
 Name="IndefiniteGradientFunction"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Double"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>Gradient.Indefinite</Expression>
</Case></Cases>
</Function><Function
 Type="Gradient"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinGradient"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Gradient"
 Name="g1"
>
</Parameter><Parameter
 Type="Gradient"
 Name="g2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="g1 is indefinite"
>
<PreConditions>
<PreCondition>g1 == Gradient.Indefinite</PreCondition></PreConditions>
<Expression>g2</Expression>
</Case><Case
 Name="g2 is indefinite"
>
<PreConditions>
<PreCondition>g2 == Gradient.Indefinite</PreCondition></PreConditions>
<Expression>g1</Expression>
</Case><Case
 Name="g1 &lt; g2"
>
<PreConditions>
<PreCondition>g1 &lt; g2</PreCondition></PreConditions>
<Expression>g1</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>g2</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinSpeed"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Speed"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Speed.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Speed.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X2</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MaxSpeedFunction"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Double"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>Speed.MaxSpeed</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Acceleration"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinAcceleration"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Acceleration"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Acceleration"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Distance.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Distance.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X2</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AddDistance"
>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 or X2 equal Infinity"
>
<PreConditions>
<PreCondition>X1 == Distance.Infinity OR X2 == Distance.Infinity</PreCondition></PreConditions>
<Expression>Distance.Infinity</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X1 + X2</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinLength"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Length"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Length"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Length.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Length.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X2</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MaxDistance"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Distance.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Distance.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X1</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MaxSpeed"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Speed"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Speed.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Speed.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X1</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Acceleration"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MaxTime"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Time"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Time"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Time.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Time.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X1</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Acceleration"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MaxAcceleration"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Acceleration"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Acceleration"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Acceleration.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Acceleration.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X1</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinDistance"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Distance.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Distance.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X2</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AbsoluteSpeed"
>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="X"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X is positive"
>
<PreConditions>
<PreCondition>X &gt;= 0.0</PreCondition></PreConditions>
<Expression>X</Expression>
</Case><Case
 Name="X is negative"
>
<Expression>- X</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MaxLength"
>
<Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Length"
 Name="X1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Length"
 Name="X2"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="X1 infinite"
>
<PreConditions>
<PreCondition>X1 == Length.Infinity</PreCondition></PreConditions>
<Expression>X1</Expression>
</Case><Case
 Name="X2 infinite"
>
<PreConditions>
<PreCondition>X2 == Length.Infinity</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="X1 &lt; X2"
>
<PreConditions>
<PreCondition>X1 &lt; X2</PreCondition></PreConditions>
<Expression>X2</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>X1</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Speed"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SpeedToMS"
>
<Parameters>
<Parameter
 Type="BaseTypes.Speed"
 Name="Val"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>Val / 3.6</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Speed"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SpeedToKmH"
>
<Parameters>
<Parameter
 Type="BaseTypes.Speed"
 Name="Val"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>Val * 3.6</Expression>
</Case></Cases>
</Function></Functions>
<Variables>
<Variable
 Type="Acceleration"
 DefaultValue="9.81"
 VariableMode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 NeedsRequirement="FALSE"
 Name="G"
>
<Comment>The earth gravity</Comment>
</Variable></Variables>
</NameSpace>

<NameSpace
 X="1000"
 Y="710"
 Width="100"
 Height="50"
 Name="BrakeCommands"
 Guid="fd5695eb-c4e5-4f36-a75a-736b7b5c97ea"
>
<NameSpaces>
</NameSpaces>
<Enumerations>
<Enum
 Default="BrakeReason.SupervisingStandstill"
 X="410"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="BrakeReason"
 Guid="0fb8e0ec-b6c6-4517-b005-253d3c0ebdea"
>
<ReqRef
 Id="ce7d1ef1-5c76-4031-a912-dd0416fd0924"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6b8d455d-eb79-4af0-a1a2-a854ac0ed25e"
>
</ReqRef><Comment>Enumerates all the possible reasons for the emergency brakes to be tripped</Comment>
<Values>
<EnumValue
 Value=""
 Name="OrderFromRBC"
 Guid="0b225f61-844c-4a87-8946-d28a505473e4"
>
</EnumValue><EnumValue
 Value=""
 Name="BaliseGroupMessageInconsistency"
 Guid="e008b5cc-8185-4108-9ae7-3d5a8e532bcf"
>
</EnumValue><EnumValue
 Value=""
 Name="RAMSSupervision"
 Guid="31bfc0c1-770f-4d78-8706-6f1e43dbc5c6"
>
</EnumValue><EnumValue
 Value=""
 Name="SpeedAndDistanceMonitoring"
 Guid="d3eeb92d-e1ef-4689-b1b2-889c691cac61"
>
</EnumValue><EnumValue
 Value=""
 Name="SupervisingStandstill"
 Guid="dbdb40ad-af6e-4af1-9431-43d70d92385b"
>
</EnumValue><EnumValue
 Value=""
 Name="RadioSequenceError"
 Guid="6d4ca0b1-2154-4eb7-9ea7-7e240d59ac35"
>
</EnumValue><EnumValue
 Value=""
 Name="RadioMessageConsistencyError"
 Guid="bf743a0f-d096-463c-a36a-658f55eab25f"
>
</EnumValue><EnumValue
 Value=""
 Name="NoRadioMessageInDueTime"
 Guid="25562908-959f-403c-8c52-1eaa49012735"
>
</EnumValue><EnumValue
 Value=""
 Name="LSAckTimeOut"
 Guid="d35436c1-e751-4fd2-84c1-b0bb6419f2fa"
>
</EnumValue><EnumValue
 Value=""
 Name="OSAckTimeOut"
 Guid="338ef8a2-6bf9-4cad-98c2-0181cc205fca"
>
</EnumValue><EnumValue
 Value=""
 Name="SHAckTimeOut"
 Guid="5e8d54a2-8912-4abc-aa1a-8af63befba3a"
>
</EnumValue><EnumValue
 Value=""
 Name="LevelTransitionTimeOut"
 Guid="5ed77a1e-e3bc-41dd-bc6f-01148d2c74f0"
>
</EnumValue><EnumValue
 Value=""
 Name="TrainTrip"
 Guid="d204bcf0-3f49-40b5-88a4-80dbc7c0af37"
>
</EnumValue><EnumValue
 Value=""
 Name="RollAwayProtection"
 Guid="55cc1ba7-4352-4e83-a313-c13353fe6c10"
>
</EnumValue><EnumValue
 Value=""
 Name="ReverseMovementProtection"
 Guid="7ca25367-fdc8-426c-b4ed-d7a32daa8ed9"
>
</EnumValue><EnumValue
 Value=""
 Name="LinkingInconsistency"
 Guid="6bdf2c3e-b6fd-4072-9095-7ade9ff00bae"
>
</EnumValue><EnumValue
 Value=""
 Name="ReversingDistanceExceeded"
 Guid="c55596d6-9079-4e5e-aefa-e429416f8b02"
>
</EnumValue><EnumValue
 Value=""
 Name="TextMessageAckTimeOut"
 Guid="3573ee7c-3fe0-4b46-818f-fb9b3c65e22f"
>
</EnumValue><EnumValue
 Value=""
 Name="TrainMovementDuringDataEntry"
 Guid="cd962dc2-f111-4e7d-a510-18b646f1489d"
>
</EnumValue><EnumValue
 Value=""
 Name="TrainDataChanged"
 Guid="c4831024-f248-480d-bfb4-6183361a2f1d"
>
</EnumValue><EnumValue
 Value=""
 Name="PermanentCommandInCurrentMode"
 Guid="26ee74b9-cb6b-4277-80a2-337fa9f7cd6f"
>
</EnumValue><EnumValue
 Value=""
 Name="ServiceBrakeNotApplied"
 Guid="13cc95ca-a8d6-4d7e-ba15-a4afeccea8f7"
>
</EnumValue></Values>
</Enum></Enumerations>
<Structures>
<Structure
 Default=""
 X="360"
 Y="120"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EmergencyStopStruct"
 Guid="7b0227c8-823b-44f7-9095-f54804077a15"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b3eb6b9f-b1c1-453c-9d67-32adc227b25b"
>
</ReqRef><Comment>Represents a received emergency stop (conditional or unconditional).</Comment>
<StructureElement
 TypeName="Boolean"
 Default="Boolean.False"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="IsConditional"
 Guid="885852da-4124-46b9-b30e-2dee3e29e568"
>
<Comment>Indicates if this emergency stop is conditional or not.</Comment>
</StructureElement><StructureElement
 TypeName="Messages.NID_EM"
 Default="0"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Id"
 Guid="8348abbd-53c8-4857-9938-7fb0f933f091"
>
<ReqRef
 Id="ce7d1ef1-5c76-4031-a912-dd0416fd0924"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="82e334c9-325e-4b85-a43f-f2a5ebb174b2"
>
</ReqRef><Comment>The id of the emergency stop.</Comment>
</StructureElement><StructureElement
 TypeName="BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="StopLocation"
 Guid="fc9c12ce-a392-4872-b338-33898df64176"
>
<Comment>The stop location of this emergency stop.</Comment>
</StructureElement><StructureElement
 TypeName="BrakeReason"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Reason"
 Guid="3f89f43d-554f-45d9-b2ea-ad274c34225c"
>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="BrakeReason"
 Default="[]"
 X="480"
 Y="120"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="BrakesCol"
 Guid="6669d59f-32a9-4f72-a752-3f117d072ea4"
>
</Collection><Collection
 TypeName="EmergencyStopStruct"
 Default="[]"
 X="200"
 Y="120"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EmergencyStopsCol"
 Guid="9543cdba-100d-4b27-90d5-f248e12b2645"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="86a8a1ef-1413-4149-a201-8321cc79420a"
>
</ReqRef><ReqRef
 Id="19082c8b-d1cc-4d23-a9da-8581737a0760"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a005923c-ed2e-44ff-84c8-450e7870ef82"
>
</ReqRef><ReqRef
 Id="fed0816f-33b0-4ae0-82ce-ac9e35a4efc2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="73f066da-96ea-453a-89c4-ae5c66e9727f"
>
</ReqRef><Comment>Collection holding structures of type Kernel.EmergencyStop</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="EmergencyStopStruct"
 Default=""
 X="30"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="CreateEmergencyStop"
 Guid="ed5c4ddd-670a-414d-961c-9ef4c2963243"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d1d46788-be76-4ae3-a73b-8dba6b6c10e8"
>
</ReqRef><Comment>Creates an EmergencyStop from a Conditional or Unconditional Emergency Stop messages</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="aIsConditional"
 Guid="641cccc5-1c47-4e1e-9928-d7a0d1128dbc"
>
</Parameter><Parameter
 Type="Messages.NID_EM"
 Name="aId"
 Guid="e5980230-2325-4db0-b47e-ba389b5f6219"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aStopLocation"
 Guid="95bdb748-fd62-4493-beab-82cc872754c0"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="d21e63ba-bec7-41f2-a0f1-e5ad05e4c49a"
>
<Expression>BrakeCommands.EmergencyStopStruct
 {
    Reason =&gt; BrakeCommands.BrakeReason.OrderFromRBC,
    IsConditional =&gt; aIsConditional,
    Id =&gt; aId,
    StopLocation =&gt; aStopLocation
 }</Expression>
</Case></Cases>
</Function><Function
 Type="EmergencyStopStruct"
 Default=""
 X="250"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="ClosestStopLocation"
 Guid="60af8f56-9ae5-4e3d-b04a-709236d5e630"
>
<ReqRef
 Id="4f290d49-e10d-41ae-a385-d9a756df04d3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b04396c3-8252-4401-9f39-534abc4e286e"
>
</ReqRef><Comment>Takes a collection of Emergency Stops and returns the closest conditional emergency stop</Comment>
<Parameters>
<Parameter
 Type="EmergencyStopsCol"
 Name="aESCol"
 Guid="ac51e9d6-df83-443b-a2dc-d4b7dfa198c1"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Return the closest conditional ES"
 Guid="6504658f-9677-4b71-97ed-e60c579ccab0"
>
<Expression>REDUCE aESCol | ( X.Reason == BrakeCommands.BrakeReason.OrderFromRBC AND X.IsConditional )
    USING X IN MinEmergencyStopDistance( EmergencyStop1 =&gt; X, EmergencyStop2 =&gt; RESULT )
INITIAL_VALUE BrakeCommands.EmergencyStopStruct
                            {
                                StopLocation =&gt; BaseTypes.Distance.Infinity
                            }</Expression>
</Case></Cases>
</Function><Function
 Type="EmergencyStopStruct"
 Default=""
 X="140"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinEmergencyStopDistance"
 Guid="760d41cd-34f8-4a83-8e8d-d49e57d0c208"
>
<Comment>Returns the EmergencyStop item with the closest StopLocation, chosen amongst the conditional emergency stops received from the RBC</Comment>
<Parameters>
<Parameter
 Type="EmergencyStopStruct"
 Name="EmergencyStop1"
 Guid="9e4b6b95-8fc6-4c63-82ae-6cb3353e472b"
>
</Parameter><Parameter
 Type="EmergencyStopStruct"
 Name="EmergencyStop2"
 Guid="96fac747-08ca-4dbf-b46c-6a0b449f934c"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="First emergency stop is closer"
 Guid="b6da9bf5-c399-43a3-9512-93fc756fa03f"
>
<PreConditions>
<PreCondition
 Guid="d6a8ab20-c3ba-4803-81b5-94d9115414fd"
>EmergencyStop1.StopLocation &lt; EmergencyStop2.StopLocation</PreCondition></PreConditions>
<Expression>EmergencyStop1</Expression>
</Case><Case
 Name="Otherwise"
 Guid="da188692-c1fd-43cd-9f56-3e4f3ed573be"
>
<Expression>EmergencyStop2</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="30"
 Y="410"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="AddEmergencyStop"
 Guid="ceb27117-9325-44f7-88ca-b8341a1a09d6"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4195cc84-95a8-4f19-ac0f-26a5d2694cb3"
>
</ReqRef><ReqRef
 Id="c3434cd8-a28d-4f6f-9aff-3f72b485a528"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d622edaf-ffd8-40b0-b71c-b535341b6463"
>
</ReqRef><Comment>Adds an emergency stop item to the list from a conditional emergency stop message or from an unconditional emergency stop message.</Comment>
<Parameters>
<Parameter
 Type="Messages.MESSAGE.TRACK_TO_TRAIN.Message"
 Name="aMessage"
 Guid="b1406273-1565-491b-b8e1-82c7a2f264b3"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Add emergency stop"
 Guid="7482b271-0036-4a99-8046-791fdabca1e8"
>
<Comment>Received emergency stops are added to a list containing the ID and reason or each emergency stop</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Add Conditional Emergency Stop"
 Guid="17059008-89b6-4e10-a7e3-9938cfc666eb"
>
<Comment>Adds the conditional emergency stop received in the RBC message</Comment>
<PreConditions>
<PreCondition
 Guid="e240d531-4475-416c-bb30-c3574d5dcda4"
>Available ( aMessage.CONDITIONAL_EMERGENCY_STOP )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9a5fa779-e4b0-4c4a-b5bf-584bb7826348"
>INSERT
BrakeCommands.CreateEmergencyStop (
    aIsConditional =&gt; Boolean.True,
    aId =&gt; aMessage.CONDITIONAL_EMERGENCY_STOP.NID_EM,
    aStopLocation =&gt; MessageTypes.QScaleDistance (
        distance =&gt; aMessage.CONDITIONAL_EMERGENCY_STOP.D_EMERGENCYSTOP,
        scale =&gt; aMessage.CONDITIONAL_EMERGENCY_STOP.Q_SCALE
     )
 )

IN
EmergencyStops</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Add Unconditional Emergency Stop"
 Guid="ca987d81-cf62-4efd-b7b6-f4b669f0f48e"
>
<Comment>Adds the unconditional emergency stop received in the RBC message</Comment>
<PreConditions>
<PreCondition
 Guid="ba56b109-d68e-48b6-8d69-8c00d3011ebf"
>Available ( aMessage.UNCONDITIONAL_EMERGENCY_STOP )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f4288555-85c3-46ca-85a6-a4a6c45ca5e7"
>INSERT
BrakeCommands.CreateEmergencyStop (
    aIsConditional =&gt; Boolean.False,
    aId =&gt; aMessage.UNCONDITIONAL_EMERGENCY_STOP.NID_EM,
    aStopLocation =&gt; 0.0
 )

IN
EmergencyStops</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Display emergency stops"
 Guid="4268dff1-3142-445f-81e3-f146701a7451"
>
<ReqRef
 Id="c3434cd8-a28d-4f6f-9aff-3f72b485a528"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="124f7681-01bf-4cba-ad11-122aa21910a8"
>
</ReqRef><Comment>The received emergency stops are displayed to the driver</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Display emergency stops"
 Guid="eb963954-587d-4ac4-8ee7-64cca604e788"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2f4ad37d-fe37-4706-8e7a-4d05f4ffae50"
>DMI.MasterDMI().Out_AcceptedEmergencyStops.Display()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="30"
 Y="350"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CommandServiceBrake"
 Guid="5a495d62-a2ef-479c-a3b7-11df30c8c67c"
>
<Comment>Adds a new SB command to the list of SB commands.</Comment>
<Parameters>
<Parameter
 Type="BrakeReason"
 Name="Reason"
 Guid="a5c11b88-65cd-4366-9e8b-7b131dc64ed3"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add if not present"
 Guid="ef177b28-26ef-4920-8302-761b5e8b0da0"
>
<Comment>Add the specified SB command into the list of SB commands (only if the specified command is not present in that list).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add if not present"
 Guid="f132d1b0-4cb1-4f0f-a67d-b9cc1efb43c8"
>
<PreConditions>
<PreCondition
 Guid="2277cfd5-c577-479a-be81-63f5ff686ab8"
>NOT THERE_IS X IN ServiceBrakeCommands | X == Reason</PreCondition></PreConditions>
<Actions>
<Action
 Guid="6b0ce64e-71c9-413c-ad6b-e7c6a0bf7036"
>INSERT Reason IN ServiceBrakeCommands</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="140"
 Y="410"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RemoveEmergencyStop"
 Guid="f336793a-dd82-40af-b8d5-efe066418065"
>
<Comment>Remove the emergency stop from the list.</Comment>
<Parameters>
<Parameter
 Type="Messages.NID_EM"
 Name="aId"
 Guid="bdba32de-72c1-49b0-a2df-7f1a7ea0acb4"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove emergency stop from the list"
 Guid="038fc7be-b42d-40e9-81ef-b47310f0a49e"
>
<Comment>Remove the stored emergency stop with the provided ID.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove emergency stop from the list"
 Guid="3def3988-ff76-4cd0-94db-b21625735b26"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="eb928e38-b0ef-4a1d-8bc9-6a68b0de2c13"
>REMOVE ALL X.Id == aId IN EmergencyStops</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove driver notification for empty list"
 Guid="fe50f981-7c59-47b7-b6b0-a1f72c7f1116"
>
<Comment>If this empties the list of emergency stops, the notification to the driver is removed.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove driver notification for empty list"
 Guid="2c54b49c-05a7-4cce-b224-8b4cacb10cdb"
>
<PreConditions>
<PreCondition
 Guid="ed27c8f0-85f6-4b6b-a0a1-49ed462fa9b1"
>FORALL X IN EmergencyStops | X.Reason != BrakeCommands.BrakeReason.OrderFromRBC</PreCondition></PreConditions>
<Actions>
<Action
 Guid="e2602b9e-3c0d-4aac-a5bf-d0678874da0e"
>DMI.MasterDMI().Out_AcceptedEmergencyStops.OutputInformation.DoNotDisplay()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="140"
 Y="350"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ReleaseSBCommand"
 Guid="09f7fe8a-1a47-4e68-97e6-b24cb889655e"
>
<ReqRef
 Id="c4b29bf1-b564-4981-9967-9bc22c91b8f9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fc1a78db-902f-419e-a94e-55bff1098421"
>
</ReqRef><ReqRef
 Id="33d6b46d-2f8a-4411-8e48-aa43acd4cce3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="757762f4-7296-4aba-9fa3-ec0c47c4c755"
>
</ReqRef><Comment>Removes the specified SB command.</Comment>
<Parameters>
<Parameter
 Type="BrakeReason"
 Name="Reason"
 Guid="9fc434a0-e53e-4ee8-95b2-a9dd17195ade"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete from SB commands"
 Guid="caee3add-47e5-4262-aee0-5b811736ed66"
>
<Comment>Remove the specified SB command from the list of SB commands.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete from SB commands"
 Guid="12f7528c-7738-41cf-abd0-ffafacc69e5c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="38d53262-df6c-44d6-b1c6-41d228de97e8"
>REMOVE FIRST X == Reason IN ServiceBrakeCommands</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="111"
 Y="61"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CommandEmergencyBrake"
 Guid="bf5f88f1-d4e0-47e3-9a9e-6280d5ce6804"
>
<Comment>Adds a new EB command to the list of EB commands.</Comment>
<Parameters>
<Parameter
 Type="BrakeReason"
 Name="Reason"
 Guid="ab4d06ce-5ea9-4096-89b1-60cba74686ee"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add if not present"
 Guid="ec11b3ba-2c81-42d4-9855-519dca1f21cd"
>
<Comment>Add the specified EB command into the list of EB commands (only if the specified command is not present in that list).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add if not present"
 Guid="5884d6e5-3bb9-42f2-8e7c-fd5b7d5f55be"
>
<PreConditions>
<PreCondition
 Guid="c7497b8b-3030-47ee-a3a3-f9eb29a145f9"
>NOT THERE_IS X IN EmergencyBrakeCommands | X == Reason</PreCondition></PreConditions>
<Actions>
<Action
 Guid="64ab9c81-b890-4cad-a60e-97c4f903ec11"
>INSERT Reason IN EmergencyBrakeCommands</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="221"
 Y="61"
 Width="100"
 Height="50"
 Name="ReleaseEBCommand"
 Guid="cf00f7e2-720b-4d73-8cbd-7c15321d9493"
>
<Comment>Removes the specified EB command.</Comment>
<Parameters>
<Parameter
 Type="BrakeReason"
 Name="Reason"
 Guid="42e72205-6194-4f16-8f30-3a73336e74a0"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete from EB commands"
 Guid="5bcbc366-a0a3-4922-bbf9-01d288f0f7a7"
>
<Comment>Remove the specified EB command from the list of EB commands.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete from EB commands"
 Guid="b4df50e3-66b3-48d6-9058-18d380a3ddca"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6b4369fe-e276-4300-8508-59013b043822"
>REMOVE FIRST X == Reason IN EmergencyBrakeCommands</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="EmergencyStopsCol"
 DefaultValue=""
 VariableMode="Internal"
 X="20"
 Y="120"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EmergencyStops"
 Guid="13961675-22c5-406e-905d-a628ef0abf5a"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ff0f661b-1ff8-4d89-b9c3-9920c2e5be19"
>
<Comment>Store the emergency stop messages for reference</Comment>
</ReqRef><ReqRef
 Id="19082c8b-d1cc-4d23-a9da-8581737a0760"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ff01a9c0-064c-49da-9e3c-7e0a6350c0c7"
>
</ReqRef><ReqRef
 Id="3e7cc969-494c-45a5-b39a-09b8d70e8ee3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3ee345c2-0b99-4b40-8956-1b00f302aabf"
>
</ReqRef><ReqRef
 Id="8bf47cec-0b77-42d2-b42f-49c0c29dbcec"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a52fdbc3-f937-4ba4-b42e-e622867cc194"
>
</ReqRef><Comment>This holds all the different emergency stop messages the train currently has.</Comment>
</Variable><Variable
 Type="BrakesCol"
 DefaultValue="[]"
 VariableMode="Internal"
 X="630"
 Y="120"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ServiceBrakeCommands"
 Guid="61248a07-d7a9-462c-b84e-8b9fbf6afbc0"
>
<Comment>The list of current events that trigger the service brake.</Comment>
</Variable><Variable
 Type="BrakesCol"
 VariableMode="Internal"
 X="1"
 Y="61"
 Width="100"
 Height="50"
 Name="EmergencyBrakeCommands"
 Guid="2c62a443-23eb-49af-b793-919347857f3f"
>
<Comment>The list of current events that trigger the emergency brake.</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 X="30"
 Y="530"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Display brake reason"
 Guid="620ca4e2-a41d-40ed-bcb7-c86a3d0a2888"
>
<ReqRef
 Id="3e7cc969-494c-45a5-b39a-09b8d70e8ee3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fbba527c-f509-4b37-b6b8-4c7c291fdc02"
>
</ReqRef><Comment>In trip mode, the reason for the train trip is displayed to the driver, if available.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Display reason for TR mode"
 Guid="1da3a6c2-3279-4f23-b795-09b96bfb7ae0"
>
<PreConditions>
<PreCondition
 Guid="db698431-04ed-49bb-b877-65c637a29172"
>Mode == Default.Mode.TR</PreCondition><PreCondition
 Guid="9b89c340-ef51-4c14-bb62-8a7b2d72fba4"
>BrakeCommands.EmergencyStops != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="a3fc4c17-da7a-44f6-a07b-e0a9591ad4dc"
>DMI.MasterDMI().Out_TripReason.Display(
    reason =&gt; (FIRST X IN BrakeCommands.EmergencyStops).Reason
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 X="111"
 Y="1"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Supervise service brake application"
 Guid="fa99ec53-19f9-4247-a90b-9303a9e42cae"
>
<ReqRef
 Id="974c99b8-fc9d-44d2-9d0c-04bd368c1dc0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b81f5ab1-6b41-4b33-ad85-c607c9aae390"
>
</ReqRef><Comment>If the service brake has been commanded, but it is not applied, command the emergency brake.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Supervise service brake applied"
 Guid="1c48b3bc-3b87-4b87-9c2b-03c98b3c8856"
>
<PreConditions>
<PreCondition
 Guid="7d27717f-2248-4fe2-a854-1fea475c293e"
>TIU.Brakes.ServiceBrakes.Commanded()
 AND  
NOT TIU.SBApplied</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0cff13a0-0cfb-4f3f-96c0-9257b941c09b"
>CommandEmergencyBrake(BrakeReason.ServiceBrakeNotApplied)</Action></Actions>
</RuleCondition><RuleCondition
 Name="Revoke EB command when the SB is revoked"
 Guid="e9bed4e3-d68a-4086-bfd8-5378b179c2b5"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6b5798d2-c626-4e93-8285-7165aae9a11c"
>ReleaseEBCommand(BrakeReason.ServiceBrakeNotApplied)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 X="221"
 Y="1"
 Width="100"
 Height="50"
 Name="Revoke brake commands"
 Guid="1bae3f3e-384e-45dd-a1df-708cf9689bfe"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="Revoke all applicable brake commands"
 Guid="8f65e0be-25ca-41d9-81e3-4d2a6d0cb2c7"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Name="Roll away protection"
 Guid="3bed0ee4-f485-4f93-ab06-4c989ade04fb"
>
<ReqRef
 Id="ba7f8c98-781f-404a-b7b8-e679b92c5448"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="08887037-8976-414c-8e89-947c55af6f69"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="c0ade701-88f2-4621-8c56-60e6a8d9bcf8"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Reverse movement protection"
 Guid="67f6923b-d43a-4b9a-92f4-2fd91b9b3c51"
>
<ReqRef
 Id="ba7f8c98-781f-404a-b7b8-e679b92c5448"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="39de26ca-05c4-4cf8-9092-4857aefdc79e"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="b89b42da-3611-4c01-ac57-5ddaf2eadef9"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Standstill supervision"
 Guid="616b5735-3923-4507-96e7-93a538690b19"
>
<ReqRef
 Id="ba7f8c98-781f-404a-b7b8-e679b92c5448"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9fc357e5-9050-45e9-9dc8-16766b06810c"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="180fe756-c6dc-409a-ae2d-059529871eaa"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Linking error"
 Guid="37dc5d2e-c505-44f2-b561-a9838721cc0d"
>
<ReqRef
 Id="e47d3ca7-b158-4b00-8cff-54ff5de6b32f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0468ec53-14b7-4d50-a92f-dee5a8d9ad39"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="daf69e0b-411b-45f3-a7fc-c4e86c0a376c"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Balise group inconsistency"
 Guid="09aa38c0-cd0c-4b57-902c-9783eab3e9a0"
>
<ReqRef
 Id="e47d3ca7-b158-4b00-8cff-54ff5de6b32f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1f63c21c-6b63-4727-a6ee-135e74fdfbee"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="cf3dd8a9-b400-4f42-9856-fb5aa37ad048"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="RAMS supervision"
 Guid="83a76365-1152-411b-b84e-bec672ef760c"
>
<ReqRef
 Id="e47d3ca7-b158-4b00-8cff-54ff5de6b32f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c6bd8b2b-778f-4f92-97fa-ec89336d3096"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="684b4bd7-a197-42e5-a6b5-d90ff79a23e6"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Safe radio connection"
 Guid="e5272d7c-b09b-4849-8282-8bcc12e6153b"
>
<ReqRef
 Id="1d090478-a64a-43b9-bbaf-2cdfb2d81d32"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4378ceee-4d25-48bf-acc1-c17278958dcb"
>
</ReqRef><ReqRef
 Id="4c72e2f8-34a5-4066-86d2-067ebbdb7465"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="06706927-c12c-48aa-ac8d-c3a6cf8be0bb"
>
</ReqRef><ReqRef
 Id="e7ac0b5d-5b94-4f8d-85af-20c7e79216b9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="351e310b-8b62-405d-9faa-9b85da146265"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="Release brake command"
 Guid="11c6426b-c6a9-49af-8dc7-dad48a5372cd"
>
<PreConditions>
<PreCondition
 Guid="7b2b2536-4d5a-4f23-8cf5-910edf40659e"
>Odometry.TrainIsAtStandstill()
  OR  
(
  Available(EURORADIO.CurrentRBCConnection().MessageIn)
    AND  
  EURORADIO.IncomingMessageIsConsistent(EURORADIO.CurrentRBCConnection().MessageIn)
)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="341b2ee1-963b-40f4-83df-8cfe04b55e52"
>ReleaseEBCommand(BrakeReason.NoRadioMessageInDueTime)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Reversing distance exceeded"
 Guid="bf64ad25-e6a8-4c86-aa1f-2ffc728e5dec"
>
<ReqRef
 Id="8d6f8085-1ab8-4354-a7b3-65a964c3c0c2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c5e1216c-6e2a-48ab-960d-112fff0d0cba"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="220323d5-0d32-4b04-9163-e70067023e79"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Change of train data while running"
 Guid="4a41e10c-47b9-45fb-bc7b-ecc780b7ec9f"
>
<ReqRef
 Id="26888377-1b25-4f74-b7e4-d5cd48e22465"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3a50f09d-c5ce-43c4-b94f-409efc7f23da"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="696e919a-be79-4729-9dca-73596ce8b8e8"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Train movement during driver entry"
 Guid="46485339-ae0e-433e-9914-ccfaff546476"
>
<ReqRef
 Id="4ea2399b-19bc-4a32-9cdb-b2028b2e1b01"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7411e0e1-52aa-46fb-babb-afa773ef0523"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="8b8ced74-546e-45f0-a16e-97b71e0c43bd"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Reversing distance in PT exceeded"
 Guid="84e195de-cb2b-4b82-b08b-c1fc4f32fc2e"
>
<ReqRef
 Id="f33618ea-e3d8-4986-80af-e3715207559b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="59769b70-0499-449d-aa40-dd21a019ec02"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="c90a4b10-9802-474d-8c73-75e325f48513"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Name="Acknowledgement of a text message"
 Guid="1845f1f1-2330-4734-a325-54aec1336a56"
>
<ReqRef
 Id="1d244ca0-8fad-4910-be60-7598fead7854"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e2406504-d8ee-46ab-8b9f-6de038581b69"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="&lt;Condition1&gt;"
 Guid="81754f80-c239-4286-9c00-d175278d6322"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>

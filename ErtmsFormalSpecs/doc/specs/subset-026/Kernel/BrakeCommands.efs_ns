<NameSpace
 X="1000"
 Y="710"
 Width="100"
 Height="50"
 Name="BrakeCommands"
 Guid="fd5695eb-c4e5-4f36-a75a-736b7b5c97ea"
>
<NameSpaces>
</NameSpaces>
<Enumerations>
<Enum
 Default="BrakeReason.SupervisingStandstill"
 X="410"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="BrakeReason"
 Guid="0fb8e0ec-b6c6-4517-b005-253d3c0ebdea"
>
<ReqRef
 Id="ce7d1ef1-5c76-4031-a912-dd0416fd0924"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6b8d455d-eb79-4af0-a1a2-a854ac0ed25e"
>
</ReqRef><Comment>Enumerates all the possible reasons for the emergency brakes to be tripped</Comment>
<Values>
<EnumValue
 Value=""
 Name="OrderFromRBC"
 Guid="0b225f61-844c-4a87-8946-d28a505473e4"
>
</EnumValue><EnumValue
 Value=""
 Name="BaliseGroupMessageConsistencyProblem"
 Guid="e008b5cc-8185-4108-9ae7-3d5a8e532bcf"
>
</EnumValue><EnumValue
 Value=""
 Name="RAMSSupervisionTriggered"
 Guid="31bfc0c1-770f-4d78-8706-6f1e43dbc5c6"
>
</EnumValue><EnumValue
 Value=""
 Name="SpeedAndDistanceMonitoring"
 Guid="d3eeb92d-e1ef-4689-b1b2-889c691cac61"
>
</EnumValue><EnumValue
 Value=""
 Name="SupervisingStandstill"
 Guid="dbdb40ad-af6e-4af1-9431-43d70d92385b"
>
</EnumValue><EnumValue
 Value=""
 Name="RadioSequenceError"
 Guid="6d4ca0b1-2154-4eb7-9ea7-7e240d59ac35"
>
</EnumValue><EnumValue
 Value=""
 Name="RadioMessageConsistencyError"
 Guid="bf743a0f-d096-463c-a36a-658f55eab25f"
>
</EnumValue><EnumValue
 Value=""
 Name="NoRadioMessageInDueTime"
 Guid="25562908-959f-403c-8c52-1eaa49012735"
>
</EnumValue><EnumValue
 Value=""
 Name="LSAckTimeOut"
 Guid="d35436c1-e751-4fd2-84c1-b0bb6419f2fa"
>
</EnumValue><EnumValue
 Value=""
 Name="OSAckTimeOut"
 Guid="338ef8a2-6bf9-4cad-98c2-0181cc205fca"
>
</EnumValue><EnumValue
 Value=""
 Name="SHAckTimeOut"
 Guid="5e8d54a2-8912-4abc-aa1a-8af63befba3a"
>
</EnumValue><EnumValue
 Value=""
 Name="LevelTransitionTimeOut"
 Guid="5ed77a1e-e3bc-41dd-bc6f-01148d2c74f0"
>
</EnumValue></Values>
</Enum></Enumerations>
<Structures>
<Structure
 Default=""
 X="360"
 Y="120"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EmergencyStopStruct"
 Guid="7b0227c8-823b-44f7-9095-f54804077a15"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b3eb6b9f-b1c1-453c-9d67-32adc227b25b"
>
</ReqRef><Comment>Represents a received emergency stop (conditional or unconditional).</Comment>
<StructureElement
 TypeName="Boolean"
 Default="Boolean.False"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="IsConditional"
 Guid="885852da-4124-46b9-b30e-2dee3e29e568"
>
<Comment>Indicates if this emergency stop is conditional or not.</Comment>
</StructureElement><StructureElement
 TypeName="Messages.NID_EM"
 Default="0"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Id"
 Guid="8348abbd-53c8-4857-9938-7fb0f933f091"
>
<ReqRef
 Id="ce7d1ef1-5c76-4031-a912-dd0416fd0924"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="82e334c9-325e-4b85-a43f-f2a5ebb174b2"
>
</ReqRef><Comment>The id of the emergency stop.</Comment>
</StructureElement><StructureElement
 TypeName="BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="StopLocation"
 Guid="fc9c12ce-a392-4872-b338-33898df64176"
>
<Comment>The stop location of this emergency stop.</Comment>
</StructureElement><StructureElement
 TypeName="BrakeReason"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Reason"
 Guid="3f89f43d-554f-45d9-b2ea-ad274c34225c"
>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="BrakeReason"
 Default="[]"
 X="480"
 Y="120"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ServiceBrakesCol"
 Guid="6669d59f-32a9-4f72-a752-3f117d072ea4"
>
</Collection><Collection
 TypeName="EmergencyStopStruct"
 Default="[]"
 X="200"
 Y="120"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EmergencyStopsCol"
 Guid="9543cdba-100d-4b27-90d5-f248e12b2645"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="86a8a1ef-1413-4149-a201-8321cc79420a"
>
</ReqRef><ReqRef
 Id="19082c8b-d1cc-4d23-a9da-8581737a0760"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a005923c-ed2e-44ff-84c8-450e7870ef82"
>
</ReqRef><ReqRef
 Id="fed0816f-33b0-4ae0-82ce-ac9e35a4efc2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="73f066da-96ea-453a-89c4-ae5c66e9727f"
>
</ReqRef><Comment>Collection holding structures of type Kernel.EmergencyStop</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="EmergencyStopStruct"
 Default=""
 X="30"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="CreateEmergencyStop"
 Guid="ed5c4ddd-670a-414d-961c-9ef4c2963243"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d1d46788-be76-4ae3-a73b-8dba6b6c10e8"
>
</ReqRef><Comment>Creates an EmergencyStop from a Conditional or Unconditional Emergency Stop messages</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="aIsConditional"
 Guid="641cccc5-1c47-4e1e-9928-d7a0d1128dbc"
>
</Parameter><Parameter
 Type="Messages.NID_EM"
 Name="aId"
 Guid="e5980230-2325-4db0-b47e-ba389b5f6219"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aStopLocation"
 Guid="95bdb748-fd62-4493-beab-82cc872754c0"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="d21e63ba-bec7-41f2-a0f1-e5ad05e4c49a"
>
<Expression>BrakeCommands.EmergencyStopStruct
 {
    Reason =&gt; BrakeCommands.BrakeReason.OrderFromRBC,
    IsConditional =&gt; aIsConditional,
    Id =&gt; aId,
    StopLocation =&gt; aStopLocation
 }</Expression>
</Case></Cases>
</Function><Function
 Type="EmergencyStopStruct"
 Default=""
 X="250"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="ClosestStopLocation"
 Guid="60af8f56-9ae5-4e3d-b04a-709236d5e630"
>
<ReqRef
 Id="4f290d49-e10d-41ae-a385-d9a756df04d3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b04396c3-8252-4401-9f39-534abc4e286e"
>
</ReqRef><Comment>Takes a collection of Emergency Stops and returns the closest conditional emergency stop</Comment>
<Parameters>
<Parameter
 Type="EmergencyStopsCol"
 Name="aESCol"
 Guid="ac51e9d6-df83-443b-a2dc-d4b7dfa198c1"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Return the closest conditional ES"
 Guid="6504658f-9677-4b71-97ed-e60c579ccab0"
>
<Expression>REDUCE aESCol | ( X.Reason == BrakeCommands.BrakeReason.OrderFromRBC AND X.IsConditional )
    USING X IN MinEmergencyStopDistance( EmergencyStop1 =&gt; X, EmergencyStop2 =&gt; RESULT )
INITIAL_VALUE BrakeCommands.EmergencyStopStruct
                            {
                                StopLocation =&gt; BaseTypes.Distance.Infinity
                            }</Expression>
</Case></Cases>
</Function><Function
 Type="EmergencyStopStruct"
 Default=""
 X="140"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MinEmergencyStopDistance"
 Guid="760d41cd-34f8-4a83-8e8d-d49e57d0c208"
>
<Comment>Returns the EmergencyStop item with the closest StopLocation, chosen amongst the conditional emergency stops received from the RBC</Comment>
<Parameters>
<Parameter
 Type="EmergencyStopStruct"
 Name="EmergencyStop1"
 Guid="9e4b6b95-8fc6-4c63-82ae-6cb3353e472b"
>
</Parameter><Parameter
 Type="EmergencyStopStruct"
 Name="EmergencyStop2"
 Guid="96fac747-08ca-4dbf-b46c-6a0b449f934c"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="First emergency stop is closer"
 Guid="b6da9bf5-c399-43a3-9512-93fc756fa03f"
>
<PreConditions>
<PreCondition
 Guid="d6a8ab20-c3ba-4803-81b5-94d9115414fd"
>EmergencyStop1.StopLocation &lt; EmergencyStop2.StopLocation</PreCondition></PreConditions>
<Expression>EmergencyStop1</Expression>
</Case><Case
 Name="Otherwise"
 Guid="da188692-c1fd-43cd-9f56-3e4f3ed573be"
>
<Expression>EmergencyStop2</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="30"
 Y="410"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="AddEmergencyStop"
 Guid="ceb27117-9325-44f7-88ca-b8341a1a09d6"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4195cc84-95a8-4f19-ac0f-26a5d2694cb3"
>
</ReqRef><ReqRef
 Id="c3434cd8-a28d-4f6f-9aff-3f72b485a528"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d622edaf-ffd8-40b0-b71c-b535341b6463"
>
</ReqRef><Comment>Adds an emergency stop item to the list from a conditional emergency stop message or from an unconditional emergency stop message.</Comment>
<Parameters>
<Parameter
 Type="Messages.MESSAGE.TRACK_TO_TRAIN.Message"
 Name="aMessage"
 Guid="b1406273-1565-491b-b8e1-82c7a2f264b3"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Add emergency stop"
 Guid="7482b271-0036-4a99-8046-791fdabca1e8"
>
<Comment>Received emergency stops are added to a list containing the ID and reason or each emergency stop</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Add Conditional Emergency Stop"
 Guid="17059008-89b6-4e10-a7e3-9938cfc666eb"
>
<Comment>Adds the conditional emergency stop received in the RBC message</Comment>
<PreConditions>
<PreCondition
 Guid="e240d531-4475-416c-bb30-c3574d5dcda4"
>Available ( aMessage.CONDITIONAL_EMERGENCY_STOP )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9a5fa779-e4b0-4c4a-b5bf-584bb7826348"
>INSERT
BrakeCommands.CreateEmergencyStop (
    aIsConditional =&gt; Boolean.True,
    aId =&gt; aMessage.CONDITIONAL_EMERGENCY_STOP.NID_EM,
    aStopLocation =&gt; MessageTypes.QScaleDistance (
        distance =&gt; aMessage.CONDITIONAL_EMERGENCY_STOP.D_EMERGENCYSTOP,
        scale =&gt; aMessage.CONDITIONAL_EMERGENCY_STOP.Q_SCALE
     )
 )

IN
EmergencyStops</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Add Unconditional Emergency Stop"
 Guid="ca987d81-cf62-4efd-b7b6-f4b669f0f48e"
>
<Comment>Adds the unconditional emergency stop received in the RBC message</Comment>
<PreConditions>
<PreCondition
 Guid="ba56b109-d68e-48b6-8d69-8c00d3011ebf"
>Available ( aMessage.UNCONDITIONAL_EMERGENCY_STOP )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f4288555-85c3-46ca-85a6-a4a6c45ca5e7"
>INSERT
BrakeCommands.CreateEmergencyStop (
    aIsConditional =&gt; Boolean.False,
    aId =&gt; aMessage.UNCONDITIONAL_EMERGENCY_STOP.NID_EM,
    aStopLocation =&gt; 0.0
 )

IN
EmergencyStops</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Display emergency stops"
 Guid="4268dff1-3142-445f-81e3-f146701a7451"
>
<ReqRef
 Id="c3434cd8-a28d-4f6f-9aff-3f72b485a528"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="124f7681-01bf-4cba-ad11-122aa21910a8"
>
</ReqRef><Comment>The received emergency stops are displayed to the driver</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Display emergency stops"
 Guid="eb963954-587d-4ac4-8ee7-64cca604e788"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2f4ad37d-fe37-4706-8e7a-4d05f4ffae50"
>DMI.MasterDMI().Out_AcceptedEmergencyStops.Display()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="30"
 Y="350"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ApplySBCommand"
 Guid="5a495d62-a2ef-479c-a3b7-11df30c8c67c"
>
<Comment>Adds a new SB command to the list of SB commands and applies the SB brake.</Comment>
<Parameters>
<Parameter
 Type="BrakeReason"
 Name="Command"
 Guid="a5c11b88-65cd-4366-9e8b-7b131dc64ed3"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add if not present"
 Guid="ec11b3ba-2c81-42d4-9855-519dca1f21cd"
>
<Comment>Add the specified SB command into the list of SB commands (only if the specified command is not present in that list).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add if not present"
 Guid="5884d6e5-3bb9-42f2-8e7c-fd5b7d5f55be"
>
<PreConditions>
<PreCondition
 Guid="c7497b8b-3030-47ee-a3a3-f9eb29a145f9"
>NOT THERE_IS X IN ServiceBrakeCommands | X == Command</PreCondition></PreConditions>
<Actions>
<Action
 Guid="64ab9c81-b890-4cad-a60e-97c4f903ec11"
>INSERT Command IN ServiceBrakeCommands</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="140"
 Y="410"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RemoveEmergencyStop"
 Guid="f336793a-dd82-40af-b8d5-efe066418065"
>
<Comment>Remove the emergency stop from the list.</Comment>
<Parameters>
<Parameter
 Type="Messages.NID_EM"
 Name="aId"
 Guid="bdba32de-72c1-49b0-a2df-7f1a7ea0acb4"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove emergency stop from the list"
 Guid="038fc7be-b42d-40e9-81ef-b47310f0a49e"
>
<Comment>Remove the stored emergency stop with the provided ID.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove emergency stop from the list"
 Guid="3def3988-ff76-4cd0-94db-b21625735b26"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="eb928e38-b0ef-4a1d-8bc9-6a68b0de2c13"
>REMOVE ALL X.Id == aId IN EmergencyStops</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove driver notification for empty list"
 Guid="fe50f981-7c59-47b7-b6b0-a1f72c7f1116"
>
<Comment>If this empties the list of emergency stops, the notification to the driver is removed.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove driver notification for empty list"
 Guid="2c54b49c-05a7-4cce-b224-8b4cacb10cdb"
>
<PreConditions>
<PreCondition
 Guid="ed27c8f0-85f6-4b6b-a0a1-49ed462fa9b1"
>FORALL X IN EmergencyStops | X.Reason != BrakeCommands.BrakeReason.OrderFromRBC</PreCondition></PreConditions>
<Actions>
<Action
 Guid="e2602b9e-3c0d-4aac-a5bf-d0678874da0e"
>DMI.MasterDMI().Out_AcceptedEmergencyStops.OutputInformation.DoNotDisplay()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="140"
 Y="350"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RemoveSBCommand"
 Guid="09f7fe8a-1a47-4e68-97e6-b24cb889655e"
>
<ReqRef
 Id="c4b29bf1-b564-4981-9967-9bc22c91b8f9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fc1a78db-902f-419e-a94e-55bff1098421"
>
</ReqRef><ReqRef
 Id="33d6b46d-2f8a-4411-8e48-aa43acd4cce3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="757762f4-7296-4aba-9fa3-ec0c47c4c755"
>
</ReqRef><Comment>Removes the specified SB command.</Comment>
<Parameters>
<Parameter
 Type="BrakeReason"
 Name="Command"
 Guid="9fc434a0-e53e-4ee8-95b2-a9dd17195ade"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete from SB commands"
 Guid="caee3add-47e5-4262-aee0-5b811736ed66"
>
<Comment>Remove the specified SB command from the list of SB commands.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete from SB commands"
 Guid="12f7528c-7738-41cf-abd0-ffafacc69e5c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="38d53262-df6c-44d6-b1c6-41d228de97e8"
>REMOVE FIRST X == Command IN ServiceBrakeCommands</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="EmergencyStopsCol"
 DefaultValue=""
 VariableMode="Internal"
 X="20"
 Y="120"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EmergencyStops"
 Guid="13961675-22c5-406e-905d-a628ef0abf5a"
>
<ReqRef
 Id="2b2cca84-5637-4f57-be10-029b36aa0f1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ff0f661b-1ff8-4d89-b9c3-9920c2e5be19"
>
<Comment>Store the emergency stop messages for reference</Comment>
</ReqRef><ReqRef
 Id="19082c8b-d1cc-4d23-a9da-8581737a0760"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ff01a9c0-064c-49da-9e3c-7e0a6350c0c7"
>
</ReqRef><ReqRef
 Id="3e7cc969-494c-45a5-b39a-09b8d70e8ee3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3ee345c2-0b99-4b40-8956-1b00f302aabf"
>
</ReqRef><ReqRef
 Id="8bf47cec-0b77-42d2-b42f-49c0c29dbcec"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a52fdbc3-f937-4ba4-b42e-e622867cc194"
>
</ReqRef><Comment>This holds all the different emergency stop messages the train currently has.</Comment>
</Variable><Variable
 Type="ServiceBrakesCol"
 DefaultValue="[]"
 VariableMode="Internal"
 X="630"
 Y="120"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ServiceBrakeCommands"
 Guid="61248a07-d7a9-462c-b84e-8b9fbf6afbc0"
>
<Comment>The list of current events that trigger the service brake.</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 X="30"
 Y="530"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Display brake reason"
 Guid="620ca4e2-a41d-40ed-bcb7-c86a3d0a2888"
>
<ReqRef
 Id="3e7cc969-494c-45a5-b39a-09b8d70e8ee3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fbba527c-f509-4b37-b6b8-4c7c291fdc02"
>
</ReqRef><Comment>In trip mode, the reason for the train trip is displayed to the driver, if available.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Display reason for TR mode"
 Guid="1da3a6c2-3279-4f23-b795-09b96bfb7ae0"
>
<PreConditions>
<PreCondition
 Guid="db698431-04ed-49bb-b877-65c637a29172"
>Mode == Default.Mode.TR</PreCondition><PreCondition
 Guid="9b89c340-ef51-4c14-bb62-8a7b2d72fba4"
>BrakeCommands.EmergencyStops != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="a3fc4c17-da7a-44f6-a07b-e0a9591ad4dc"
>DMI.MasterDMI().Out_TripReason.Display(
    reason =&gt; (FIRST X IN BrakeCommands.EmergencyStops).Reason
)</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>

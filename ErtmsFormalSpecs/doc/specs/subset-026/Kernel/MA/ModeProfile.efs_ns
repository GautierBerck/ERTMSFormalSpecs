<NameSpace
 Name="ModeProfile"
>
<NameSpaces>
</NameSpaces>
<Structures>
<Structure
 Implemented="TRUE"
 Name="ModeProfile"
>
<ReqRef
 Id="b4a804d0-53f6-49e2-9897-24b3babe34bd"
>
</ReqRef><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 Name="Distance"
>
<ReqRef
 Id="89925322-dec9-4aa4-8555-37decb3284a8"
>
</ReqRef><ReqRef
 Id="41d92e15-57e4-42b2-b756-c81a36b02db7"
>
</ReqRef><ReqRef
 Id="b5036802-ea03-4dbd-bf0e-3bbb99b7059e"
>
</ReqRef></StructureElement><StructureElement
 TypeName="Default.Mode.ModeProfile"
 Default="Default.Mode.ModeProfile.LS"
 Mode="Internal"
 Implemented="TRUE"
 Name="Mode"
>
<ReqRef
 Id="8f6cbd01-6f4a-4a45-9b12-053cfa6bbf95"
>
</ReqRef></StructureElement><StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 Name="Speed"
>
<ReqRef
 Id="64e2f87a-5cf2-41b5-880c-dd026169eb44"
>
</ReqRef></StructureElement><StructureElement
 TypeName="Default.BaseTypes.Length"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 Name="Length"
>
<ReqRef
 Id="d4f0c125-9a62-4674-b0f5-bcba928f4835"
>
</ReqRef></StructureElement><StructureElement
 TypeName="Default.BaseTypes.Length"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 Name="AcknLength"
>
<ReqRef
 Id="e91cb267-376b-429f-8918-4d597fdcc562"
>
</ReqRef></StructureElement><StructureElement
 TypeName="Messages.Q_MAMODE"
 Default="Messages.Q_MAMODE.as_both_the_EOA_and_SvL__instead_of_the_EOA_and_SvL_given_by_the_MA"
 Mode="Internal"
 Implemented="TRUE"
 Name="SupervisionQualifier"
>
<ReqRef
 Id="1eede305-f64b-4f63-a204-1c83dcb1ed2f"
>
</ReqRef></StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="ModeProfile"
 MaxSize="20"
 Default="[]"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ModeProfiles"
>
</Collection></Collections>
<Functions>
<Function
 Type="Boolean"
 Implemented="TRUE"
 Name="DistanceIsWithinAModeProfile"
>
<ReqRef
 Id="d36ad0a3-d955-4bcf-8e7c-29e8ad53a491"
>
</ReqRef><ReqRef
 Id="522c85b9-86d1-4001-8889-a1a4e5ca7c51"
>
</ReqRef><ReqRef
 Id="3b16e285-2513-4123-a986-2b50cf27f60f"
>
</ReqRef><ReqRef
 Id="c3a0339b-08aa-4713-aace-4e545d160b65"
>
</ReqRef><ReqRef
 Id="b4a804d0-53f6-49e2-9897-24b3babe34bd"
>
</ReqRef><ReqRef
 Id="25c1b633-d7e9-42a2-be80-037ff105dcd8"
>
</ReqRef><ReqRef
 Id="68290e3a-68aa-485c-9b80-ad0a6da08d3f"
>
</ReqRef><ReqRef
 Id="dbd12b73-87dc-4f8b-aad5-7e3cb90fa5b1"
>
</ReqRef><Parameters>
<Parameter
 Type="ModeProfile.ModeProfile"
 Name="aModeProfile"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="SH"
>
<PreConditions>
<PreCondition>aModeProfile.Mode == Mode.ModeProfile.SH</PreCondition></PreConditions>
<Expression>aModeProfile.Distance &lt;= TrainPosition.FrontEndPosition ( DistanceInterval.Max )</Expression>
</Case><Case
 Name="OS"
>
<PreConditions>
<PreCondition>aModeProfile.Mode == Mode.ModeProfile.OS</PreCondition></PreConditions>
<Expression>aModeProfile.Distance &lt;= TrainPosition.FrontEndPosition ( DistanceInterval.Max )
  AND
TrainPosition.FrontEndPosition ( DistanceInterval.Min ) &lt; aModeProfile.Distance + BaseTypes.LengthToDistance ( aModeProfile.Length )
  AND
Kernel.Level.Value in [Level.L1, Level.L2, Level.L3]</Expression>
</Case><Case
 Name="LS"
>
<Expression>aModeProfile.Distance &lt;= TrainPosition.FrontEndPosition ( DistanceInterval.Max )
  AND
TrainPosition.FrontEndPosition ( DistanceInterval.Min ) &lt; aModeProfile.Distance + BaseTypes.LengthToDistance ( aModeProfile.Length )</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="ModeProfileIsApplicable"
>
<ReqRef
 Id="d7eddae1-a7bf-4be3-8180-19f2e70ac2fd"
>
</ReqRef><Comment></Comment>
<Cases>
<Case
 Name="Mode profile not available"
>
<PreConditions>
<PreCondition>MA.MA == EMPTY OR Profile == []</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="Mode profile available"
>
<Expression>DistanceIsWithinAModeProfile ( FIRST_IN Profile )</Expression>
</Case></Cases>
</Function><Function
 Type="Default.Mode.ModeProfile"
 Implemented="TRUE"
 Name="CurrentMode"
>
<ReqRef
 Id="66ed413a-6b6e-4b23-b847-4b1870c4d831"
>
</ReqRef><Cases>
<Case
 Name="Value"
>
<Expression>( FIRST_IN Profile ).Mode</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="RemoveMode"
>
<ReqRef
 Id="03b6c53e-3c15-4db3-8d90-3353c60fd14d"
>
</ReqRef><ReqRef
 Id="eaa70a17-109a-45b5-8747-ecc49e581ccd"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="ModeProfile"
 Name="aProfile"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="OS or LS"
>
<PreConditions>
<PreCondition>aProfile.Mode == Mode.ModeProfile.OS</PreCondition></PreConditions>
<Expression>TrainPosition.FrontEndPosition ( DistanceInterval.Min ) &gt;= aProfile.Distance + BaseTypes.LengthToDistance ( aProfile.Length )</Expression>
</Case><Case
 Name="SH"
>
<Expression>False</Expression>
</Case></Cases>
</Function><Function
 Type="ModeProfile"
 Implemented="TRUE"
 Name="ProfileForInfill"
>
<ReqRef
 Id="2a495f6e-680c-4def-a6b5-d8bcd1f41a9d"
>
</ReqRef><Comment>Indicates if the given mode profile should be deleted or not when an infill information is received. There are three possible cases:
1. If the profile is before the infill location, it should be kept (the whole profile is returned).
2. If the profile is after the infill location, it should be deleted (EMPTY is returned).
3. If the infill location is inside the profile, the latter is shortened until the infill location.</Comment>
<Parameters>
<Parameter
 Type="ModeProfile"
 Name="aProfile"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="InfillDistance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Infill location before profile"
>
<PreConditions>
<PreCondition>aProfile.Distance + BaseTypes.LengthToDistance ( aProfile.Length ) &lt;= InfillDistance</PreCondition></PreConditions>
<Expression>aProfile</Expression>
</Case><Case
 Name="Infill location after profile"
>
<PreConditions>
<PreCondition>InfillDistance &lt;= aProfile.Distance</PreCondition></PreConditions>
<Expression>EMPTY</Expression>
</Case><Case
 Name="Infill location inside profile"
>
<Expression>ModeProfile
{
    AcknLength =&gt; aProfile.AcknLength,
    Distance =&gt; aProfile.Distance,
    Length =&gt; InfillDistance - aProfile.Distance,
    Mode =&gt; aProfile.Mode,
    Speed =&gt; aProfile.Speed,
    SupervisionQualifier =&gt; aProfile.SupervisionQualifier
}</Expression>
</Case></Cases>
</Function><Function
 Type="Default.Mode.ModeProfile"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ERTMS_To_EFS_Mode"
>
<Parameters>
<Parameter
 Type="Messages.M_MAMODE"
 Name="aMode"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="OS"
>
<PreConditions>
<PreCondition>aMode == Messages.M_MAMODE.On_Sight</PreCondition></PreConditions>
<Expression>Mode.ModeProfile.OS</Expression>
</Case><Case
 Name="LS"
>
<PreConditions>
<PreCondition>aMode == Messages.M_MAMODE.Limited_Supervision</PreCondition></PreConditions>
<Expression>Mode.ModeProfile.LS</Expression>
</Case><Case
 Name="SH"
>
<PreConditions>
<PreCondition>aMode == Messages.M_MAMODE.Shunting</PreCondition></PreConditions>
<Expression>Mode.ModeProfile.SH</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="AcknAreaReached"
>
<ReqRef
 Id="f8b146ed-492a-43af-b78d-fbd3e12aa731"
>
</ReqRef><ReqRef
 Id="69196e9c-9533-43f3-8c1f-cd9a9b248178"
>
</ReqRef><ReqRef
 Id="2ae92ee4-8298-478f-94c4-806e389cc5cb"
>
</ReqRef><Comment>Indicates if the acknowledgement area is reached for a given mode profile.</Comment>
<Parameters>
<Parameter
 Type="ModeProfile"
 Name="aProfile"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>aProfile.Distance - BaseTypes.LengthToDistance ( aProfile.AcknLength ) &lt;= TrainPosition.FrontEndPosition ( DistanceInterval.Nom )</Expression>
</Case></Cases>
</Function><Function
 Type="SpeedAndDistanceMonitoring.TargetSupervision.Target"
 Implemented="TRUE"
 Name="EOA"
>
<ReqRef
 Id="81828a4c-73e2-440d-8353-e050603f323f"
>
</ReqRef><ReqRef
 Id="6b1f5744-6c85-45eb-a7de-1eba5bad0131"
>
</ReqRef><ReqRef
 Id="f2ddac1e-eea7-4f30-ade6-5ace543c21ae"
>
</ReqRef><Cases>
<Case
 Name="Mode Profile EOA available"
>
<PreConditions>
<PreCondition>Available ( MA.MA )</PreCondition><PreCondition>Profile != []</PreCondition><PreCondition>( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ) != EMPTY</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Location =&gt; ( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ).Distance,
    Speed =&gt; 0.0,
    Length =&gt; ( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ).Length
}</Expression>
</Case><Case
 Name="No Mode Profile EOA available"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="SpeedAndDistanceMonitoring.TargetSupervision.Target"
 Implemented="TRUE"
 Name="SvL"
>
<ReqRef
 Id="81828a4c-73e2-440d-8353-e050603f323f"
>
</ReqRef><ReqRef
 Id="6b1f5744-6c85-45eb-a7de-1eba5bad0131"
>
</ReqRef><ReqRef
 Id="f2ddac1e-eea7-4f30-ade6-5ace543c21ae"
>
</ReqRef><Cases>
<Case
 Name="Mode Profile SvL available"
>
<PreConditions>
<PreCondition>( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ).SupervisionQualifier == Messages.Q_MAMODE.as_both_the_EOA_and_SvL__instead_of_the_EOA_and_SvL_given_by_the_MA</PreCondition><PreCondition>( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ) != EMPTY</PreCondition><PreCondition>Profile != []</PreCondition><PreCondition>Available ( MA.MA )</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Location =&gt; ( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ).Distance,
    Speed =&gt; 0.0,
    Length =&gt; ( FIRST_IN Profile | NOT ModeProfileIsApplicable ( X ) ).Length
}</Expression>
</Case><Case
 Name="No Mode Profile SvL available"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitiateDriverAck"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Initiate driver ack"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Initiate driver ack for OS"
>
<ReqRef
 Id="1650d44a-fe6b-42d3-b8a8-77f7a93f90b8"
>
</ReqRef><PreConditions>
<PreCondition>CurrentMode() == Mode.ModeProfile.OS</PreCondition></PreConditions>
<Actions>
<Action>DMI.MasterDMI().InitiateAcknOfOSMode()</Action><Action>DriverAckTimer &lt;- CurrentTime</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Initiate driver ack for LS"
>
<ReqRef
 Id="bf8f8704-ab96-4ceb-a58e-dca57715e14f"
>
</ReqRef><PreConditions>
<PreCondition>CurrentMode() == Mode.ModeProfile.LS</PreCondition></PreConditions>
<Actions>
<Action>DMI.MasterDMI().InitiateAcknOfLSMode()</Action><Action>DriverAckTimer &lt;- CurrentTime</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Initiate driver ack for SH"
>
<ReqRef
 Id="9802040a-5388-4af0-8605-01cd7d0816f3"
>
</ReqRef><ReqRef
 Id="39ae88ad-20ca-43d1-8c3f-5f7172777b6e"
>
</ReqRef><PreConditions>
<PreCondition>CurrentMode() == Mode.ModeProfile.SH</PreCondition></PreConditions>
<Actions>
<Action>DMI.MasterDMI().InitiateAcknOfSHMode()</Action><Action>DriverAckTimer &lt;- CurrentTime</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 Name="ModeProfileReceived"
>
<ReqRef
 Id="4a580e9d-fd64-4951-b7a4-51530d1469e7"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="4744429f-fce3-4833-817a-c0cd74ffcd7f"
>
</ReqRef><ReqRef
 Id="e6b9b34b-5183-45ec-96a2-8eef4909b34c"
>
</ReqRef><ReqRef
 Id="85399986-8b1a-4ee5-ba62-20eb7ca0a3b9"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.MODE_PROFILE.Message"
 Name="Packet"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Name="Add first profile"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="Add new profile"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>AddNewProfile
(
    L_ACKMAMODE =&gt; Packet.L_ACKMAMODE,
    D_MAMODE =&gt; Packet.D_MAMODE,
    L_MAMODE =&gt; Packet.L_MAMODE,
    M_MAMODE =&gt; Packet.M_MAMODE,
    V_MAMODE =&gt; Packet.V_MAMODE,
    Q_MAMODE =&gt; Packet.Q_MAMODE,
    Q_SCALE =&gt; Packet.Q_SCALE
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Name="Add following profiles"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="Add following profiles"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>APPLY
    AddNewProfile
    (
        L_ACKMAMODE =&gt; X.L_ACKMAMODE,
        D_MAMODE =&gt; X.D_MAMODE,
        L_MAMODE =&gt; X.L_MAMODE,
        M_MAMODE =&gt; X.M_MAMODE,
        V_MAMODE =&gt; X.V_MAMODE,
        Q_MAMODE =&gt; X.Q_MAMODE,
        Q_SCALE =&gt; Packet.Q_SCALE
    )
ON
    Packet.Sequence1</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 Name="AddNewProfile"
>
<ReqRef
 Id="4744429f-fce3-4833-817a-c0cd74ffcd7f"
>
</ReqRef><ReqRef
 Id="e91cb267-376b-429f-8918-4d597fdcc562"
>
</ReqRef><ReqRef
 Id="89925322-dec9-4aa4-8555-37decb3284a8"
>
</ReqRef><ReqRef
 Id="d4f0c125-9a62-4674-b0f5-bcba928f4835"
>
</ReqRef><ReqRef
 Id="8f6cbd01-6f4a-4a45-9b12-053cfa6bbf95"
>
</ReqRef><ReqRef
 Id="64e2f87a-5cf2-41b5-880c-dd026169eb44"
>
</ReqRef><ReqRef
 Id="1eede305-f64b-4f63-a204-1c83dcb1ed2f"
>
</ReqRef><ReqRef
 Id="b4a804d0-53f6-49e2-9897-24b3babe34bd"
>
</ReqRef><Parameters>
<Parameter
 Type="Default.MessageTypes.Length"
 Name="L_ACKMAMODE"
>
</Parameter><Parameter
 Type="Default.MessageTypes.Distance"
 Name="D_MAMODE"
>
</Parameter><Parameter
 Type="Default.MessageTypes.Length"
 Name="L_MAMODE"
>
</Parameter><Parameter
 Type="Messages.M_MAMODE"
 Name="M_MAMODE"
>
</Parameter><Parameter
 Type="Default.MessageTypes.Speed"
 Name="V_MAMODE"
>
</Parameter><Parameter
 Type="Messages.Q_MAMODE"
 Name="Q_MAMODE"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Q_SCALE"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add new profile"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Infill available, SH"
>
<ReqRef
 Id="bd3f7106-e2c1-465f-be7e-f47543c5f94b"
>
</ReqRef><PreConditions>
<PreCondition>Kernel.Infill.Data != EMPTY</PreCondition><PreCondition>M_MAMODE == Messages.M_MAMODE.Shunting</PreCondition></PreConditions>
<Actions>
<Action>INSERT
    ModeProfile
    {
        AcknLength =&gt; MessageTypes.QScaleLength ( length =&gt; L_ACKMAMODE, scale =&gt; Q_SCALE ),
        Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; D_MAMODE, scale =&gt; Q_SCALE ) + BTM.Linking.DistanceToBaliseGroup ( Kernel.Infill.Data.NID_BG ),
        Length =&gt; BaseTypes.Length.NA,
        Mode =&gt; ERTMS_To_EFS_Mode ( M_MAMODE ),
        Speed =&gt; MessageTypes.SpeedResolution ( speed =&gt; V_MAMODE, resolution =&gt; 5.0 ),
        SupervisionQualifier =&gt; Q_MAMODE
    }
IN
    Profile</Action></Actions>
</RuleCondition><RuleCondition
 Name="No infill available, SH"
>
<PreConditions>
<PreCondition>M_MAMODE == Messages.M_MAMODE.Shunting</PreCondition></PreConditions>
<Actions>
<Action>INSERT
    ModeProfile
    {
        AcknLength =&gt; MessageTypes.QScaleLength ( length =&gt; L_ACKMAMODE, scale =&gt; Q_SCALE ),
        Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; D_MAMODE, scale =&gt; Q_SCALE ),
        Length =&gt; BaseTypes.Length.NA,
        Mode =&gt; ERTMS_To_EFS_Mode ( M_MAMODE ),
        Speed =&gt; MessageTypes.SpeedResolution ( speed =&gt; V_MAMODE, resolution =&gt; 5.0 ),
        SupervisionQualifier =&gt; Q_MAMODE
    }
IN
    Profile</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Infill available, LS or OS"
>
<ReqRef
 Id="bd3f7106-e2c1-465f-be7e-f47543c5f94b"
>
</ReqRef><PreConditions>
<PreCondition>Kernel.Infill.Data != EMPTY</PreCondition></PreConditions>
<Actions>
<Action>INSERT
    ModeProfile
    {
        AcknLength =&gt; MessageTypes.QScaleLength ( length =&gt; L_ACKMAMODE, scale =&gt; Q_SCALE ),
        Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; D_MAMODE, scale =&gt; Q_SCALE ) + BTM.Linking.DistanceToBaliseGroup ( Kernel.Infill.Data.NID_BG ),
        Length =&gt; MessageTypes.QScaleLength ( length =&gt; L_MAMODE, scale =&gt; Q_SCALE ),
        Mode =&gt; ERTMS_To_EFS_Mode ( M_MAMODE ),
        Speed =&gt; MessageTypes.SpeedResolution ( speed =&gt; V_MAMODE, resolution =&gt; 5.0 ),
        SupervisionQualifier =&gt; Q_MAMODE
    }
IN
    Profile</Action></Actions>
</RuleCondition><RuleCondition
 Name="No infill available, LS or OS"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>INSERT
    ModeProfile
    {
        AcknLength =&gt; MessageTypes.QScaleLength ( length =&gt; L_ACKMAMODE, scale =&gt; Q_SCALE ),
        Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; D_MAMODE, scale =&gt; Q_SCALE ),
        Length =&gt; MessageTypes.QScaleLength ( length =&gt; L_MAMODE, scale =&gt; Q_SCALE ),
        Mode =&gt; ERTMS_To_EFS_Mode ( M_MAMODE ),
        Speed =&gt; MessageTypes.SpeedResolution ( speed =&gt; V_MAMODE, resolution =&gt; 5.0 ),
        SupervisionQualifier =&gt; Q_MAMODE
    }
IN
    Profile</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 Name="ClearModeProfile"
>
<ReqRef
 Id="74a25803-8c28-4708-b506-55a76bd8bc21"
>
</ReqRef><Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE.Message"
 Name="InfillPacket"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Clear previous Mode Profile"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Infill available"
>
<ReqRef
 Id="2a495f6e-680c-4def-a6b5-d8bcd1f41a9d"
>
</ReqRef><PreConditions>
<PreCondition>InfillPacket != EMPTY</PreCondition></PreConditions>
<Actions>
<Action>ModeProfile.Profile &lt;- MAP ModeProfile.Profile USING ModeProfile.ProfileForInfill ( aProfile =&gt; X, InfillDistance =&gt; BTM.Linking.DistanceToBaliseGroup ( InfillPacket.NID_BG ) )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="No infill available"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>ModeProfile.Profile &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="ModeProfiles"
 DefaultValue="[]"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="Profile"
>
<ReqRef
 Id="cbef1165-fc33-4ac1-994e-5f8a83f5e225"
>
</ReqRef><ReqRef
 Id="d7eddae1-a7bf-4be3-8180-19f2e70ac2fd"
>
</ReqRef><ReqRef
 Id="4650224e-986e-4212-b1a4-704ebe9317a4"
>
</ReqRef><ReqRef
 Id="4a580e9d-fd64-4951-b7a4-51530d1469e7"
>
</ReqRef><ReqRef
 Id="98b78c68-b649-45c4-9dd8-6bfbf4a8f9c1"
>
</ReqRef><Comment>Represents the mode profile of the train.</Comment>
</Variable><Variable
 Type="Default.BaseTypes.Time"
 DefaultValue="Default.BaseTypes.Time.NA"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="DriverAckTimer"
>
<ReqRef
 Id="19ba3404-792f-4f75-a058-7b89395bce5c"
>
</ReqRef><ReqRef
 Id="c3352be2-25f7-499e-b638-51b4b8e180ed"
>
</ReqRef><ReqRef
 Id="f1fefc2b-0ed9-4f11-9b47-0930e4ba5821"
>
</ReqRef><ReqRef
 Id="81394bed-5665-4b0a-a527-9c845c6db537"
>
</ReqRef><ReqRef
 Id="c4b29bf1-b564-4981-9967-9bc22c91b8f9"
>
</ReqRef><ReqRef
 Id="33d6b46d-2f8a-4411-8e48-aa43acd4cce3"
>
</ReqRef><Comment>Represents the time when the driver ack was requested.</Comment>
</Variable><Variable
 Type="Default.BaseTypes.Time"
 DefaultValue="5.0"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="Tack"
>
<ReqRef
 Id="c3352be2-25f7-499e-b638-51b4b8e180ed"
>
</ReqRef><ReqRef
 Id="19ba3404-792f-4f75-a058-7b89395bce5c"
>
</ReqRef><ReqRef
 Id="f1fefc2b-0ed9-4f11-9b47-0930e4ba5821"
>
</ReqRef><ReqRef
 Id="81394bed-5665-4b0a-a527-9c845c6db537"
>
</ReqRef><ReqRef
 Id="c4b29bf1-b564-4981-9967-9bc22c91b8f9"
>
</ReqRef><ReqRef
 Id="33d6b46d-2f8a-4411-8e48-aa43acd4cce3"
>
</ReqRef><ReqRef
 Id="8c5b881c-69d8-482a-9ec2-98778e9fddc2"
>
</ReqRef><Comment>Driver acknowledgement time.</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="CleanUp"
 Implemented="TRUE"
 Name="Clear profile"
>
<ReqRef
 Id="eaa70a17-109a-45b5-8747-ecc49e581ccd"
>
</ReqRef><ReqRef
 Id="03b6c53e-3c15-4db3-8d90-3353c60fd14d"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="Clear profile"
>
<Comment></Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action>REMOVE ALL RemoveMode ( X ) IN  Profile</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Display driver ack"
>
<Comment>For the modes SB and PT, the acknowledgement procedure is launched in the procedures Start of Mission and Train Trip respectively.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Display driver ack for OS"
>
<ReqRef
 Id="4ebd4845-9d08-4721-8788-6991ab66d3eb"
>
</ReqRef><ReqRef
 Id="33b54e77-9cb2-4190-92cd-1cfeb3a94b5d"
>
</ReqRef><ReqRef
 Id="83b4c9f4-e480-4a7c-96f4-1e05dbd4b32f"
>
</ReqRef><ReqRef
 Id="f8b146ed-492a-43af-b78d-fbd3e12aa731"
>
</ReqRef><ReqRef
 Id="02990d41-6bf4-4c89-94b5-aee9d1db2510"
>
</ReqRef><ReqRef
 Id="becf543b-94ee-4436-85b2-708e4e58eb59"
>
</ReqRef><ReqRef
 Id="9a63ec40-59c4-454f-a41d-51030fc51481"
>
</ReqRef><ReqRef
 Id="6e265aec-2ccf-45a4-8713-34d7ea277c53"
>
</ReqRef><PreConditions>
<PreCondition>Mode not in [Mode.OS, Mode.SB, Mode.PT]</PreCondition><PreCondition>( FIRST_IN Profile | X.Mode == Mode.OS ) != EMPTY</PreCondition><PreCondition>AcknAreaReached ( FIRST_IN Profile | X.Mode == Mode.OS )</PreCondition><PreCondition>ModeRelatedSpeedLimits.OSModeSpeedLimit() &gt; Odometry.EstimatedSpeed </PreCondition><PreCondition>NOT DMI.MasterDMI().In_AcknOfOSMode.InputInformation.DisplayRequested</PreCondition></PreConditions>
<Actions>
<Action>InitiateDriverAck()</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Display driver ack for LS"
>
<ReqRef
 Id="4fb449e7-3376-4d1d-9cb1-7ab1bbb762c0"
>
</ReqRef><ReqRef
 Id="2ae92ee4-8298-478f-94c4-806e389cc5cb"
>
</ReqRef><ReqRef
 Id="f0920be8-e671-4e0b-bc0b-5be12d23b1e3"
>
</ReqRef><ReqRef
 Id="7eb769c6-7a5f-4b65-8ae8-09c3c01deb44"
>
</ReqRef><ReqRef
 Id="af9486e0-4055-4c87-949a-b752d1b54a50"
>
</ReqRef><ReqRef
 Id="504f5bac-204f-4aec-a4b3-3b1b00862286"
>
</ReqRef><ReqRef
 Id="7cba24fb-f8f0-411d-b295-e943d3f930c1"
>
</ReqRef><ReqRef
 Id="8c7eb4ff-2716-4d9f-a6f2-bd52aacc416b"
>
</ReqRef><PreConditions>
<PreCondition>Mode not in [Mode.LS, Mode.SB, Mode.PT]</PreCondition><PreCondition>( FIRST_IN Profile | X.Mode == Mode.LS ) != EMPTY</PreCondition><PreCondition>AcknAreaReached ( FIRST_IN Profile | X.Mode == Mode.LS )</PreCondition><PreCondition>ModeRelatedSpeedLimits.LSModeSpeedLimit() &gt; Odometry.EstimatedSpeed </PreCondition><PreCondition>NOT DMI.MasterDMI().In_AcknOfLSMode.InputInformation.DisplayRequested</PreCondition></PreConditions>
<Actions>
<Action>InitiateDriverAck()</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Display driver ack for SH"
>
<ReqRef
 Id="ff0a5aad-f1c0-4297-8d8f-e10acf97e4cb"
>
</ReqRef><ReqRef
 Id="9cce28e1-bf30-4268-94b6-ed70b2b1533e"
>
</ReqRef><ReqRef
 Id="69196e9c-9533-43f3-8c1f-cd9a9b248178"
>
</ReqRef><ReqRef
 Id="dc4be9b4-1646-45e4-bf8b-64af5d107a36"
>
</ReqRef><ReqRef
 Id="39ae88ad-20ca-43d1-8c3f-5f7172777b6e"
>
</ReqRef><PreConditions>
<PreCondition>Mode not in [Mode.SB, Mode.PT]</PreCondition><PreCondition>( FIRST_IN Profile | X.Mode == Mode.SH ) != EMPTY</PreCondition><PreCondition>AcknAreaReached ( FIRST_IN Profile | X.Mode == Mode.SH )</PreCondition><PreCondition>ModeRelatedSpeedLimits.SHModeSpeedLimit() &gt; Odometry.EstimatedSpeed </PreCondition><PreCondition>NOT DMI.MasterDMI().In_AcknOfSHMode.InputInformation.DisplayRequested</PreCondition></PreConditions>
<Actions>
<Action>InitiateDriverAck()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Driver ack timeout"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Driver ack timeout for OS"
>
<ReqRef
 Id="c3352be2-25f7-499e-b638-51b4b8e180ed"
>
</ReqRef><ReqRef
 Id="19ba3404-792f-4f75-a058-7b89395bce5c"
>
</ReqRef><PreConditions>
<PreCondition>DMI.MasterDMI().In_AcknOfOSMode.InputInformation.DisplayRequested</PreCondition><PreCondition>DriverAckTimer + Tack &gt;= CurrentTime</PreCondition><PreCondition>NOT EmergencyBrakeApplied</PreCondition><PreCondition>Kernel.Mode == Mode.OS</PreCondition></PreConditions>
<Actions>
<Action>Kernel.EmergencyBrakeApplied &lt;- True</Action><Action>INSERT
    Kernel.EmergencyStop
    {
        Id =&gt; BrakeReason.DriverAckTimeOut,
        IsConditional =&gt; False,
        StopLocation =&gt; TrainPosition.FrontEndPosition ( DistanceInterval.Nom )
    }
IN
    Kernel.EmergencyStops</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Driver ack timeout for LS"
>
<ReqRef
 Id="c4b29bf1-b564-4981-9967-9bc22c91b8f9"
>
</ReqRef><ReqRef
 Id="33d6b46d-2f8a-4411-8e48-aa43acd4cce3"
>
</ReqRef><PreConditions>
<PreCondition>Kernel.Mode == Mode.LS</PreCondition><PreCondition>NOT EmergencyBrakeApplied</PreCondition><PreCondition>DMI.MasterDMI().In_AcknOfLSMode.InputInformation.DisplayRequested</PreCondition><PreCondition>DriverAckTimer + Tack &gt;= CurrentTime</PreCondition></PreConditions>
<Actions>
<Action>INSERT
    Kernel.EmergencyStop
    {
        Id =&gt; BrakeReason.DriverAckTimeOut,
        IsConditional =&gt; False,
        StopLocation =&gt; TrainPosition.FrontEndPosition ( DistanceInterval.Nom )
    }
IN
    Kernel.EmergencyStops</Action><Action>Kernel.EmergencyBrakeApplied &lt;- True</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Driver ack timeout for SH"
>
<ReqRef
 Id="f1fefc2b-0ed9-4f11-9b47-0930e4ba5821"
>
</ReqRef><ReqRef
 Id="81394bed-5665-4b0a-a527-9c845c6db537"
>
</ReqRef><PreConditions>
<PreCondition>Kernel.Mode == Mode.SH</PreCondition><PreCondition>DMI.MasterDMI().In_AcknOfSHMode.InputInformation.DisplayRequested</PreCondition><PreCondition>NOT EmergencyBrakeApplied</PreCondition><PreCondition>DriverAckTimer + Tack &gt;= CurrentTime</PreCondition></PreConditions>
<Actions>
<Action>Kernel.EmergencyBrakeApplied &lt;- True</Action><Action>INSERT
    Kernel.EmergencyStop
    {
        Id =&gt; BrakeReason.DriverAckTimeOut,
        IsConditional =&gt; False,
        StopLocation =&gt; TrainPosition.FrontEndPosition ( DistanceInterval.Nom )
    }
IN
    Kernel.EmergencyStops</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Release emergency brake"
>
<ReqRef
 Id="c3352be2-25f7-499e-b638-51b4b8e180ed"
>
</ReqRef><ReqRef
 Id="19ba3404-792f-4f75-a058-7b89395bce5c"
>
</ReqRef><ReqRef
 Id="f1fefc2b-0ed9-4f11-9b47-0930e4ba5821"
>
</ReqRef><ReqRef
 Id="81394bed-5665-4b0a-a527-9c845c6db537"
>
</ReqRef><ReqRef
 Id="c4b29bf1-b564-4981-9967-9bc22c91b8f9"
>
</ReqRef><ReqRef
 Id="33d6b46d-2f8a-4411-8e48-aa43acd4cce3"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Release emergency brake"
>
<PreConditions>
<PreCondition>EmergencyBrakeApplied</PreCondition><PreCondition>THERE_IS_IN EmergencyStops | X.Id == BrakeReason.DriverAckTimeOut</PreCondition><PreCondition>( COUNT EmergencyStops ) == 1</PreCondition></PreConditions>
<Actions>
<Action>EmergencyBrakeApplied &lt;- False</Action><Action>EmergencyStops &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>

<NameSpace
 Name="AxleLoad"
>
<NameSpaces>
</NameSpaces>
<Structures>
<Structure
 Implemented="TRUE"
 Name="AxleLoadProfile"
>
<ReqRef
 Id="faca2edb-7220-4d55-bebe-f367d8f8d94a"
>
</ReqRef><ReqRef
 Id="38267eb5-348a-4d09-b4c6-4907aea348f2"
>
</ReqRef><ReqRef
 Id="0bc77f7e-62ac-42cc-bf02-051522a4d11a"
>
</ReqRef><Comment>Represents the speed restrictions due to axle load.</Comment>
<StructureElement
 TypeName="Messages.Q_TRACKINIT"
 Default="Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitialState"
>
<ReqRef
 Id="13a5ea24-0fd2-4281-99df-f3585e1e8e67"
>
<Comment></Comment>
</ReqRef><Comment>Indicates if the initial state has to be resumed. In that case there will be no speed restrictions due to axle load profile.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EmptyProfileDistance"
>
<ReqRef
 Id="35ef498a-1c12-4203-b283-26436d281f11"
>
<Comment></Comment>
</ReqRef><Comment>Indicates when the initial state has to be resumed.</Comment>
</StructureElement><StructureElement
 TypeName="AxleLoads"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ALs"
>
<Comment>The collection of axle load speed restrictions.</Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Name="AxleLoadValue"
>
<ReqRef
 Id="13798cd3-156c-4ae1-a925-b41dfda2af88"
>
</ReqRef><Comment>Represents an axle load value: a couple Axle Load Category x Speed.</Comment>
<StructureElement
 TypeName="Messages.M_AXLELOADCAT"
 Default="Messages.M_AXLELOADCAT.A"
 Mode="Internal"
 NeedsRequirement="FALSE"
 Name="Category"
>
<ReqRef
 Id="0fb117ff-1235-410b-998a-c63b1d3a86ed"
>
</ReqRef><Comment></Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Speed"
>
<ReqRef
 Id="4947d3fc-1665-47ff-a945-9900318dce54"
>
</ReqRef></StructureElement></Structure><Structure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AxleLoad"
>
<Comment>Represents an axle load information.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Length"
>
<ReqRef
 Id="1a02feaa-c003-44ae-bbc0-6685c3aab8d7"
>
</ReqRef><Comment>The length of the axle load speed profile.</Comment>
</StructureElement><StructureElement
 TypeName="Messages.Q_FRONT"
 Default="Messages.Q_FRONT.Train_length_delay_on_validity_end_point_of_profile_element"
 Mode="Internal"
 Implemented="TRUE"
 Name="TrainLengthDelay"
>
<ReqRef
 Id="4721d317-67ec-4171-b836-61c80b2d2d4c"
>
</ReqRef><ReqRef
 Id="ba5abe5a-c0c5-477f-9ab9-52ce07011bb1"
>
</ReqRef><ReqRef
 Id="49595724-3359-4536-a90e-542bc90ffc8e"
>
</ReqRef><Comment>Indicates if the train length has to be considered for the computation of the speed restrictions due to axle load profile.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Distance"
>
<ReqRef
 Id="0b4c179e-a381-412e-bdad-451bda6066e4"
>
</ReqRef><Comment>The distance to the next axle load speed profile.</Comment>
</StructureElement><StructureElement
 TypeName="AxleLoadValues"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Values"
>
<ReqRef
 Id="4947d3fc-1665-47ff-a945-9900318dce54"
>
</ReqRef><ReqRef
 Id="0fb117ff-1235-410b-998a-c63b1d3a86ed"
>
</ReqRef><ReqRef
 Id="13798cd3-156c-4ae1-a925-b41dfda2af88"
>
</ReqRef><Comment>Speed restrictions associated to the different axle load categories.</Comment>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="AxleLoadValue"
 MaxSize="20"
 Default="[]"
 Implemented="TRUE"
 Name="AxleLoadValues"
>
<ReqRef
 Id="13798cd3-156c-4ae1-a925-b41dfda2af88"
>
</ReqRef><Comment>Represents a set of axle load values.</Comment>
</Collection><Collection
 TypeName="AxleLoad"
 MaxSize="30"
 Default="[]"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AxleLoads"
>
<ReqRef
 Id="e0ecf6c6-baf4-4601-a121-23e3946830d7"
>
</ReqRef><Comment>Represents a set of axle load informations.</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 Name="SpeedRestrictions"
>
<ReqRef
 Id="38267eb5-348a-4d09-b4c6-4907aea348f2"
>
</ReqRef><ReqRef
 Id="bfa09769-fb03-456f-b92b-14ab4cf7977b"
>
</ReqRef><ReqRef
 Id="b2a3ff3a-3f41-4dde-9bf8-ee649ce14d86"
>
</ReqRef><ReqRef
 Id="fd20f88d-92bb-420d-b66e-a56c331b36a0"
>
</ReqRef><Comment>Provides the speed restrictions profile due to axle loads.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="SpeedRestriction"
>
<Expression>(REDUCE ASP.ALs
    USING  
        MIN ( First =&gt; FUNCTION d : Default.BaseTypes.Distance =&gt; AxleLoadSpeedRestriction ( anAxleLoad =&gt; X, Distance =&gt; d ), 
                  Second =&gt; RESULT )
INITIAL_VALUE BaseTypes.MaxSpeedFunction) (Distance)</Expression>
</Case></Cases>
</Function><Function
 Type="AxleLoad"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateAxleLoad"
>
<ReqRef
 Id="1a02feaa-c003-44ae-bbc0-6685c3aab8d7"
>
</ReqRef><ReqRef
 Id="4721d317-67ec-4171-b836-61c80b2d2d4c"
>
</ReqRef><ReqRef
 Id="0fb117ff-1235-410b-998a-c63b1d3a86ed"
>
</ReqRef><ReqRef
 Id="4947d3fc-1665-47ff-a945-9900318dce54"
>
</ReqRef><Comment>Creates an EFS axle load structure from an element of the collection of ERTMS axle loads provided by the trackside.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.SubStructure2"
 Name="anAxleLoad"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>AxleLoad
{
    Distance =&gt; Distance,
    Length =&gt; Default.MessageTypes.QScaleLength (anAxleLoad.L_AXLELOAD, Scale),
    TrainLengthDelay =&gt; anAxleLoad.Q_FRONT,
    Values =&gt; MAP anAxleLoad.Sequence2 
                     USING CreateAxleLoadValue(
                                Category =&gt; X.M_AXLELOADCAT, 
                                Speed =&gt; Default.MessageTypes.SpeedResolution (X.V_AXLELOAD, 5.0))
}</Expression>
</Case></Cases>
</Function><Function
 Type="AxleLoadValue"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateAxleLoadValue"
>
<Comment>Creates an EFS axle load value from an ERMS axle load value provided by the trackside.</Comment>
<Parameters>
<Parameter
 Type="Messages.M_AXLELOADCAT"
 Name="Category"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Speed"
 Name="Speed"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>AxleLoadValue
{
    Category =&gt; Category,
    Speed =&gt; Speed
}</Expression>
</Case></Cases>
</Function><Function
 Type="AxleLoad"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateFirstAxleLoad"
>
<Comment>Creates an EFS axle load structure from the first ERTMS axle load element provided by the trackside.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="NextDistance"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Length"
 Name="AxleLoadLength"
>
</Parameter><Parameter
 Type="Messages.Q_FRONT"
 Name="TrainLengthDelay"
>
</Parameter><Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.Collection1"
 Name="AxleLoadValues"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>AxleLoad
{
    Distance =&gt; NextDistance,
    Length =&gt; AxleLoadLength,
    TrainLengthDelay =&gt; TrainLengthDelay,
    Values =&gt; MAP AxleLoadValues 
                     USING CreateAxleLoadValue(
                           Category =&gt; X.M_AXLELOADCAT, 
                           Speed =&gt; Default.MessageTypes.SpeedResolution (X.V_AXLELOAD, 5.0))
}</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AbsoluteDistance"
>
<Comment>Provides the absolute distance of a certain axle load provided by trackside.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.Collection3"
 Name="AxleLoads"
>
</Parameter><Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.SubStructure2"
 Name="anAxleLoad"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>SUM
    AxleLoads |
        Before ( ExpectedFirst =&gt; X, ExpectedSecond =&gt; anAxleLoad, Collection =&gt; AxleLoads ) OR ( X == anAxleLoad )
USING
    Default.MessageTypes.QScaleDistance ( distance =&gt; X.D_AXLELOAD, scale =&gt; Scale )</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 Name="AxleLoadSpeedRestriction"
>
<ReqRef
 Id="0aceff75-cd35-48b0-8d5a-4bc8277d35c4"
>
</ReqRef><ReqRef
 Id="9682d65d-131e-40e8-9f59-eee5815bf874"
>
</ReqRef><Comment>Provides the speed restriction for a given level crossing. The speed restriction is applicable after the distance specified in the level crossing information and during its length. From all categories specified in the level crossing, only the categories lower than or equal to the train&apos;s category are chosen and among these categories the minimum speed value is chosen. In case when there is no category lower that or equal to the train&apos;s category, the maximum speed value is returned.</Comment>
<Parameters>
<Parameter
 Type="AxleLoad"
 Name="anAxleLoad"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="BeforeAxleLoad"
>
<PreConditions>
<PreCondition>0.0 &lt;= Distance</PreCondition><PreCondition>Distance &lt; anAxleLoad.Distance</PreCondition></PreConditions>
<Expression>Default.BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="DuringAxleLoad"
>
<PreConditions>
<PreCondition>Distance &lt; anAxleLoad.Distance + Default.BaseTypes.LengthToDistance (AxleLoadLength (anAxleLoad) )</PreCondition><PreCondition>anAxleLoad.Distance  &lt;= Distance</PreCondition></PreConditions>
<Expression>REDUCE
    anAxleLoad.Values | X.Category &lt;= Kernel.TrainData.TrainData.Value.AxleLoadCategory
    USING
        BaseTypes.MinSpeed (X1 =&gt; X.Speed, X2 =&gt; RESULT)
    INITIAL_VALUE
        Default.BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="AfterAxleLoad"
>
<PreConditions>
<PreCondition>anAxleLoad.Distance + Default.BaseTypes.LengthToDistance (AxleLoadLength (anAxleLoad) ) &lt;= Distance</PreCondition></PreConditions>
<Expression>Default.BaseTypes.Speed.MaxSpeed</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Implemented="TRUE"
 Name="AxleLoadLength"
>
<ReqRef
 Id="ba5abe5a-c0c5-477f-9ab9-52ce07011bb1"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="49595724-3359-4536-a90e-542bc90ffc8e"
>
<Comment></Comment>
</ReqRef><Comment>Provides the length of an axle load together with the train&apos;s length, if needed.</Comment>
<Parameters>
<Parameter
 Type="AxleLoad"
 Name="anAxleLoad"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="TrainLengthDelay"
>
<PreConditions>
<PreCondition>anAxleLoad.TrainLengthDelay== Messages.Q_FRONT.Train_length_delay_on_validity_end_point_of_profile_element</PreCondition></PreConditions>
<Expression>anAxleLoad.Length + Kernel.TrainData.TrainData.Value.TrainLength</Expression>
</Case><Case
 Name="NoTrainLengthDelay"
>
<Expression>anAxleLoad.Length</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 Implemented="TRUE"
 Name="AxleLoadProfileReceived"
>
<ReqRef
 Id="0bc77f7e-62ac-42cc-bf02-051522a4d11a"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="6a6eebd7-7178-4712-b7fa-135df10c5a4c"
>
</ReqRef><ReqRef
 Id="9be8a6ae-9abe-4a16-8a19-f28a0581c994"
>
</ReqRef><Comment>This procedure is called when a new axle load profile is received. There are two cases:
  - If the initial states have to be resumed, the distance to where they have to be resumed is saved
  - If no initial states have to be resumed, the axle load profile is updated (done by the HandleNewAxleLoadProfile procedure)</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.Message"
 Name="Packet"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="UpdateAxleLoadProfile"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitialStatesToBeResumed"
>
<ReqRef
 Id="35ef498a-1c12-4203-b283-26436d281f11"
>
</ReqRef><ReqRef
 Id="13a5ea24-0fd2-4281-99df-f3585e1e8e67"
>
</ReqRef><Comment></Comment>
<PreConditions>
<PreCondition>Packet.Q_TRACKINIT == Messages.Q_TRACKINIT.Empty_profile__initial_states_to_be_resumed</PreCondition><PreCondition>Mode != Mode.TR</PreCondition></PreConditions>
<Actions>
<Action>ASP.InitialState &lt;- Packet.Q_TRACKINIT</Action><Action>ASP.EmptyProfileDistance &lt;- Default.MessageTypes.QScaleDistance ( distance =&gt; Packet.D_TRACKINIT, scale =&gt; Packet.Q_SCALE )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="NoInitialStatesToBeResumed"
>
<Comment></Comment>
<PreConditions>
<PreCondition>Packet.Q_TRACKINIT == Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow</PreCondition><PreCondition>Mode != Mode.TR</PreCondition></PreConditions>
<Actions>
<Action>HandleNewAxleLoadProfile(Packet)</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AddAxleLoad"
>
<Comment>Adds a new axle load value to the axle load&apos;s collection.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.SubStructure2"
 Name="anAxleLoad"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AddAxleLoad"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="AddAxleLoad"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>INSERT
    CreateAxleLoad(anAxleLoad =&gt; anAxleLoad,
                              Distance =&gt; Distance
                              Scale =&gt; Scale)
IN
    ASP.ALs</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="HandleNewAxleLoadProfile"
>
<Comment>Updates the axle load profile according to the values of the packet received as parameter.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.AXLE_LOAD_SPEED_PROFILE.Message"
 Name="Packet"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RemoveOldAxleLoads"
>
<ReqRef
 Id="d12121cf-b42b-4840-8d4d-20d47f70a1aa"
>
</ReqRef><Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RemoveOldAxleLoads"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>REMOVE ALL X.Distance &gt;= Default.MessageTypes.QScaleDistance ( distance =&gt; Packet.D_AXLELOAD, scale =&gt; Packet.Q_SCALE ) IN ASP.ALs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InsertFirstAxleLoad"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InsertFirstAxleLoad"
>
<ReqRef
 Id="0b4c179e-a381-412e-bdad-451bda6066e4"
>
</ReqRef><ReqRef
 Id="13a5ea24-0fd2-4281-99df-f3585e1e8e67"
>
</ReqRef><ReqRef
 Id="4721d317-67ec-4171-b836-61c80b2d2d4c"
>
</ReqRef><ReqRef
 Id="1a02feaa-c003-44ae-bbc0-6685c3aab8d7"
>
</ReqRef><PreConditions>
</PreConditions>
<Actions>
<Action>INSERT
    CreateFirstAxleLoad ( NextDistance =&gt; Default.MessageTypes.QScaleDistance ( distance =&gt; Packet.D_AXLELOAD, scale =&gt; Packet.Q_SCALE ),
                                      AxleLoadLength =&gt; Default.MessageTypes.QScaleLength ( length =&gt; Packet.L_AXLELOAD, scale =&gt; Packet.Q_SCALE ),
                                      TrainLengthDelay =&gt; Packet.Q_FRONT,
                                       AxleLoadValues =&gt; Packet.Sequence1 )
IN
    ASP.ALs</Action><Action>ASP.InitialState &lt;- Packet.Q_TRACKINIT</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InsertFollowingAxleLoads"
>
<ReqRef
 Id="0b4c179e-a381-412e-bdad-451bda6066e4"
>
</ReqRef><Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InsertFollowingAxleLoads"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>APPLY
    AddAxleLoad ( anAxleLoad =&gt; X,
                            Distance =&gt; AbsoluteDistance ( AxleLoads =&gt; Packet.Sequence3, anAxleLoad =&gt; X, Scale =&gt; Packet.Q_SCALE) + Default.MessageTypes.QScaleDistance ( distance =&gt; Packet.D_AXLELOAD, scale =&gt; Packet.Q_SCALE),
                            Scale =&gt; Packet.Q_SCALE )
ON
    Packet.Sequence3</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="AxleLoadProfile"
 DefaultValue="AxleLoadProfile
{
    EmptyProfileDistance =&gt; 0.0,
    InitialState =&gt; Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow,
    ALs =&gt; []
}"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="ASP"
>
<ReqRef
 Id="38267eb5-348a-4d09-b4c6-4907aea348f2"
>
</ReqRef><ReqRef
 Id="6a6eebd7-7178-4712-b7fa-135df10c5a4c"
>
</ReqRef><ReqRef
 Id="a3345820-31df-4b78-835f-d02b8d42d3bc"
>
</ReqRef><Comment>Contains the axle load speed restrictions provided by the trackside.</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitialStatesToBeResumed"
>
<ReqRef
 Id="13a5ea24-0fd2-4281-99df-f3585e1e8e67"
>
</ReqRef><ReqRef
 Id="35ef498a-1c12-4203-b283-26436d281f11"
>
</ReqRef><Comment>If the train reached the distance where the initial states have to be resumed, the axle load profile is deleted.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitialStatesToBeResumed"
>
<Comment></Comment>
<PreConditions>
<PreCondition>BTM.TravelledDistanceFromLRBG() &gt;= ASP.EmptyProfileDistance</PreCondition><PreCondition>ASP.InitialState == Messages.Q_TRACKINIT.Empty_profile__initial_states_to_be_resumed</PreCondition></PreConditions>
<Actions>
<Action>ASP.ALs &lt;- []</Action><Action>ASP.InitialState &lt;- Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>

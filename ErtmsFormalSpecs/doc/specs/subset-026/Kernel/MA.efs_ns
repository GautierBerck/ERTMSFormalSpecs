<NameSpace
 Name="MA"
>
<NameSpaces>
<NameSpaceRef
 Name="ModeProfile"
>
</NameSpaceRef></NameSpaces>
<Structures>
<Structure
 Implemented="TRUE"
 Verified="TRUE"
 Name="MovementAuthority"
>
<ReqRef
 Id="3.8.1"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.8.3"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.8.1.1"
>
<Comment>EOA is computed based on the sections defined in the MA (see function EOA)</Comment>
</ReqRef><ReqRef
 Id="7.4.2.3.1"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="7.4.2.4.bis"
>
</ReqRef><Comment></Comment>
<StructureElement
 TypeName="BaseTypes.Speed"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TargetSpeed"
>
<ReqRef
 Id="3.8.1.1.b"
>
<Comment>In this model, there is no distinction between EOA and LOA</Comment>
</ReqRef><ReqRef
 Id="7.5.1.157"
>
</ReqRef><ReqRef
 Id="3.13.3.4.1.1"
>
</ReqRef><Comment>The target speed represents the permitted speed at the EOA.</Comment>
</StructureElement><StructureElement
 TypeName="Sections"
 Default="[]"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Sections"
>
<ReqRef
 Id="3.8.1.1.f"
>
</ReqRef><ReqRef
 Id="3.8.3.1"
>
<Comment></Comment>
</ReqRef><Comment>Represents the sections of the MA.</Comment>
</StructureElement><StructureElement
 TypeName="EndSection"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="EndSection"
>
<ReqRef
 Id="3.8.1.1.f"
>
</ReqRef><ReqRef
 Id="3.8.3.3"
>
</ReqRef><Comment>Represents the end section of this MA.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Time"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TargetSpeedTimeOut"
>
<ReqRef
 Id="3.8.1.1.b"
>
</ReqRef><ReqRef
 Id="7.5.1.146"
>
</ReqRef><Comment>The time-out associated to the target speed, if any.</Comment>
</StructureElement><StructureElement
 TypeName="Messages.NID_BG"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="ReferenceBG"
>
<ReqRef
 Id="3.8.3.6"
>
</ReqRef><ReqRef
 Id="3.8.3.9"
>
</ReqRef><Comment>Represents the LRBG to which refers the first section.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ReferenceBGLocation"
>
<ReqRef
 Id="3.8.3.6"
>
</ReqRef><ReqRef
 Id="3.8.3.9"
>
</ReqRef><Comment></Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Name="Section"
>
<ReqRef
 Id="3.8.3.2"
>
</ReqRef><Comment>Represents a MA section.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Length"
>
<ReqRef
 Id="3.8.3.2.a"
>
</ReqRef><ReqRef
 Id="7.5.1.51"
>
</ReqRef><Comment>Represents the length of the section.</Comment>
</StructureElement><StructureElement
 TypeName="SectionTimeOut"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TimeOut"
>
<ReqRef
 Id="3.8.1.1.f.1"
>
</ReqRef><ReqRef
 Id="3.8.3.2.b"
>
</ReqRef><ReqRef
 Id="7.5.1.130"
>
</ReqRef><ReqRef
 Id="3.8.3.4"
>
</ReqRef><Comment>Represents the section time-out (if no time-out is available for this section, this field is EMPTY).</Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Verified="TRUE"
 Name="SectionTimeOut"
>
<ReqRef
 Id="3.8.3.2.b"
>
</ReqRef><ReqRef
 Id="3.8.1.1.f.1"
>
</ReqRef><Comment></Comment>
<StructureElement
 TypeName="BaseTypes.Time"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TimeOut"
>
<ReqRef
 Id="7.5.1.151"
>
</ReqRef><ReqRef
 Id="7.5.1.145"
>
</ReqRef><Comment>The section time-out value, if any.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Distance"
>
<ReqRef
 Id="7.5.1.24"
>
</ReqRef><ReqRef
 Id="7.5.1.6"
>
</ReqRef><Comment>Represents the distance from beginning of section to section timer stop location (if there is a time-out associated to this section).</Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Name="EndSection"
>
<ReqRef
 Id="3.8.1.1.f"
>
</ReqRef><ReqRef
 Id="3.8.3.3"
>
</ReqRef><Comment></Comment>
<StructureElement
 TypeName="SectionTimeOut"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="EndSectionTimeOut"
>
<ReqRef
 Id="3.8.1.1.f.2"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.8.3.3.a"
>
</ReqRef><ReqRef
 Id="7.5.1.108"
>
<Comment></Comment>
</ReqRef><Comment>Represents the end section time-out, if any.</Comment>
</StructureElement><StructureElement
 TypeName="SectionTimeOut"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TimeOut"
>
<ReqRef
 Id="3.8.1.1.f.1"
>
</ReqRef><ReqRef
 Id="3.8.3.2.b"
>
</ReqRef><ReqRef
 Id="7.5.1.130"
>
<Comment></Comment>
</ReqRef><Comment>Represents the section time-out (if no time-out is available for this section, this field is EMPTY).</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Length"
>
<ReqRef
 Id="3.8.3.2.a"
>
</ReqRef><ReqRef
 Id="7.5.1.45"
>
</ReqRef><Comment>Represents the length of the section.</Comment>
</StructureElement><StructureElement
 TypeName="DangerPoint"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="DangerPoint"
>
<ReqRef
 Id="3.8.3.3.b"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.8.1.1.c"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="7.5.1.102"
>
</ReqRef><Comment>Represents a location beyond the EOA that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
</StructureElement><StructureElement
 TypeName="Overlap"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Overlap"
>
<ReqRef
 Id="3.8.1.1.d"
>
</ReqRef><ReqRef
 Id="3.8.3.3.c"
>
</ReqRef><ReqRef
 Id="7.5.1.126"
>
</ReqRef><Comment>Location beyond the danger point that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Verified="TRUE"
 Name="DangerPoint"
>
<ReqRef
 Id="3.8.3.3.b"
>
</ReqRef><ReqRef
 Id="3.8.1.1.c"
>
</ReqRef><Comment>Represents a location beyond the EOA that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Distance"
>
<ReqRef
 Id="7.5.1.4"
>
</ReqRef><Comment>The distance from end of section to danger point.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 Name="ReleaseSpeed"
>
<ReqRef
 Id="3.8.1.1.e"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="7.5.1.168"
>
</ReqRef><Comment>The release speed related to danger point.</Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Verified="TRUE"
 Name="Overlap"
>
<ReqRef
 Id="3.8.3.3.c"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.8.1.1.d"
>
<Comment></Comment>
</ReqRef><Comment>Location beyond the danger point that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Distance"
>
<ReqRef
 Id="7.5.1.19"
>
</ReqRef><Comment>Distance from end of section to end of overlap.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TimerDistance"
>
<ReqRef
 Id="7.5.1.26"
>
</ReqRef><Comment>Distance from Overlap timer start location to end of section.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="ReleaseSpeed"
>
<ReqRef
 Id="3.8.1.1.e"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="7.5.1.169"
>
</ReqRef><Comment>Release speed related to overlap.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Time"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TimeOut"
>
<ReqRef
 Id="7.5.1.150"
>
</ReqRef><Comment>The validity time of the overlap.</Comment>
</StructureElement></Structure><Structure
 Implemented="TRUE"
 Name="MaShorteningHandler"
>
<ReqRef
 Id="3.8.5.1.3"
>
</ReqRef><ReqRef
 Id="3.8.5.1.4"
>
</ReqRef><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Location"
>
</StructureElement><StructureElement
 TypeName="Boolean"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="IsSvL"
>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="Section"
 MaxSize="6"
 Default="[]"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Sections"
>
<ReqRef
 Id="3.8.3.1"
>
</ReqRef><ReqRef
 Id="3.8.1.1.f"
>
</ReqRef><ReqRef
 Id="A1.1.11.1"
>
</ReqRef><Comment>Represents MA sections.</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="SpeedAndDistanceMonitoring.TargetSupervision.Target"
 Implemented="TRUE"
 Verified="TRUE"
 Name="EndOfMovementAuthority"
>
<ReqRef
 Id="3.8.1.1.a"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.8.3.1"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="A1.1.12.1"
>
</ReqRef><ReqRef
 Id="5.9.3.5"
>
</ReqRef><ReqRef
 Id="5.7.3.4"
>
</ReqRef><ReqRef
 Id="5.19.3.5"
>
</ReqRef><ReqRef
 Id="3.12.2.10"
>
</ReqRef><ReqRef
 Id="3.12.2.4"
>
</ReqRef><Comment>Gives the target corresponding to the End (or Limit) Of Authority. The distance of the target is obtained by adding lenghts of all the sections of the current MA. If no MA is defined, the distance is infinite to avoid the train to be tripped before receivin an MA.</Comment>
<Cases>
<Case
 Name="Route suitability EOA defined"
>
<PreConditions>
<PreCondition>TrackDescription.RouteSuitability.EOA() != EMPTY</PreCondition></PreConditions>
<Expression>TrackDescription.RouteSuitability.EOA()</Expression>
</Case><Case
 Name="Mode Profile EOA defined"
>
<PreConditions>
<PreCondition>ModeProfile.EOA() != EMPTY</PreCondition></PreConditions>
<Expression>ModeProfile.EOA()</Expression>
</Case><Case
 Name="Sections are defined in the MA"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition><PreCondition>THERE_IS_IN MA.Sections | X != EMPTY</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Speed =&gt; MA.TargetSpeed,
    Location =&gt; Default.BaseTypes.LengthToDistance ( (SUM MA.Sections USING X.Length) + MA.EndSection.Length ),
    Length =&gt; Default.BaseTypes.Distance.Infinity
}</Expression>
</Case><Case
 Name="No sections are defined in the MA"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition><PreCondition>FORALL_IN MA.Sections | X == EMPTY</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Speed =&gt; MA.TargetSpeed,
    Location =&gt; Default.BaseTypes.LengthToDistance( MA.EndSection.Length ),
    Length =&gt; Default.BaseTypes.Distance.Infinity
}</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Speed =&gt; 0.0,
    Location =&gt; Default.BaseTypes.Distance.Infinity,
    Length =&gt; Default.BaseTypes.Distance.Infinity
}</Expression>
</Case></Cases>
</Function><Function
 Type="Section"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateEFSSection"
>
<ReqRef
 Id="7.5.1.130"
>
</ReqRef><ReqRef
 Id="7.5.1.24"
>
</ReqRef><ReqRef
 Id="3.8.3.2"
>
</ReqRef><ReqRef
 Id="3.8.3.2.a"
>
</ReqRef><ReqRef
 Id="3.8.3.2.b"
>
</ReqRef><ReqRef
 Id="3.8.3.4"
>
</ReqRef><Comment>Creates an EFSSection from a section received from a balise of RBC (level 1).</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="ERTMSSection"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="TimeOutAvailable"
>
<PreConditions>
<PreCondition>ERTMSSection.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.Section_Timer_information_to_follow</PreCondition></PreConditions>
<Expression>Section
{
    Length =&gt; MessageTypes.QScaleLength ( length =&gt; ERTMSSection.L_SECTION, scale =&gt; Scale),
    TimeOut =&gt;SectionTimeOut
    {
        Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; ERTMSSection.D_SECTIONTIMERSTOPLOC, scale =&gt; Scale ),
        TimeOut =&gt; BaseTypes.Time ( ERTMSSection.T_SECTIONTIMER )
    }
}</Expression>
</Case><Case
 Name="NoTimeOut"
>
<PreConditions>
<PreCondition>ERTMSSection.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.No_Section_Timer_information</PreCondition></PreConditions>
<Expression>Section
{
    Length =&gt; MessageTypes.QScaleLength ( length =&gt; ERTMSSection.L_SECTION, scale =&gt; Scale),
    TimeOut =&gt; EMPTY
}</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ConvertSectionLvl2or3_to_SectionLvl1"
>
<ReqRef
 Id="7.5.1.130"
>
</ReqRef><ReqRef
 Id="7.5.1.24"
>
</ReqRef><Comment>Creates an EFSSection from a section received from a balise of RBC (level 1).</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.SubStructure1"
 Name="SectionLvl2or3"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1
{
    L_SECTION =&gt; SectionLvl2or3.L_SECTION,
    Q_SECTIONTIMER =&gt; SectionLvl2or3.Q_SECTIONTIMER,
    T_SECTIONTIMER =&gt; SectionLvl2or3.T_SECTIONTIMER,
    D_SECTIONTIMERSTOPLOC =&gt; SectionLvl2or3.D_SECTIONTIMERSTOPLOC
}</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Implemented="TRUE"
 Verified="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointLocation"
>
<Comment></Comment>
<Cases>
<Case
 Name="Danger Point available"
>
<PreConditions>
<PreCondition>Available ( MA.EndSection.DangerPoint )</PreCondition></PreConditions>
<Expression>EndOfMovementAuthority().Location + MA.EndSection.DangerPoint.Distance</Expression>
</Case><Case
 Name="Danger point not available"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Implemented="TRUE"
 Verified="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapLocation"
>
<Comment></Comment>
<Cases>
<Case
 Name="Overlap available"
>
<PreConditions>
<PreCondition>Available ( MA.EndSection.Overlap )</PreCondition></PreConditions>
<Expression>EndOfMovementAuthority().Location + MA.EndSection.Overlap.Distance</Expression>
</Case><Case
 Name="Overlap not available"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CurrentSectionLength"
>
<Comment>Returns the length of the current section (used for distance relocation when a new LRBG is passed).</Comment>
<Cases>
<Case
 Name="SectionsAvailable"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition><PreCondition>MA.Sections != EMPTY</PreCondition></PreConditions>
<Expression>(FIRST_IN MA.Sections).Length</Expression>
</Case><Case
 Name="EndSection"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition></PreConditions>
<Expression>MA.EndSection.Length</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 Name="SignallingRelatedSpeedRestrictions"
>
<ReqRef
 Id="3.11.2.2.e"
>
</ReqRef><ReqRef
 Id="3.13.2.3.1.1.a"
>
</ReqRef><ReqRef
 Id="3.13.2.3.2.1"
>
</ReqRef><ReqRef
 Id="7.5.1.158"
>
</ReqRef><Comment>Provides the speed profile due to signalling related speed restrictions. Only applicable for level 1.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="d"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Level 1"
>
<PreConditions>
<PreCondition>Kernel.Level.Value == Level.L1</PreCondition></PreConditions>
<Expression>SignallingRelatedSpeedRestriction</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>Default.BaseTypes.Speed.MaxSpeed</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 Name="EOASpeedRestriction"
>
<ReqRef
 Id="3.13.8.4.1"
>
</ReqRef><ReqRef
 Id="3.13.2.3.1.1.f"
>
</ReqRef><ReqRef
 Id="3.13.2.3.6.1.a"
>
</ReqRef><ReqRef
 Id="3.13.8.2.1.c"
>
</ReqRef><ReqRef
 Id="3.13.8.2.1"
>
</ReqRef><ReqRef
 Id="3.13.8.2.2"
>
</ReqRef><Comment>Provides speed restriction for EOA (if applicable). Used to calculate the SBD curve.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="EOA"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition><PreCondition>MA.TargetSpeed == 0.0</PreCondition><PreCondition>Distance &lt; EndOfMovementAuthority().Location</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 NeedsRequirement="FALSE"
 Name="EOADefined"
>
<Comment>Indicates if the end of movement autority is an EOA or a LOA.</Comment>
<Cases>
<Case
 Name="Value"
>
<Expression>Available ( MA ) AND MA.TargetSpeed == 0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Cacheable="TRUE"
 Implemented="TRUE"
 Name="SpeedRestrictions"
>
<ReqRef
 Id="3.13.2.3.1.1.f"
>
</ReqRef><ReqRef
 Id="3.13.2.3.6.1.a"
>
</ReqRef><ReqRef
 Id="3.13.8.2.1.b"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="No MA available"
>
<PreConditions>
<PreCondition>MA == EMPTY</PreCondition></PreConditions>
<Expression>0.0</Expression>
</Case><Case
 Name="Before end of movement authority"
>
<PreConditions>
<PreCondition>Distance &lt; EndOfMovementAuthority().Location</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="After LOA"
>
<PreConditions>
<PreCondition>MA.TargetSpeed != 0.0</PreCondition><PreCondition>EndOfMovementAuthority().Location &lt;= Distance</PreCondition></PreConditions>
<Expression>MA.TargetSpeed</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Cacheable="TRUE"
 Implemented="TRUE"
 Name="SvLSpeedRestriction"
>
<ReqRef
 Id="3.13.9.3.3.9"
>
<Comment></Comment>
</ReqRef><Comment>Provides speed restriction for SvL. Used to compute the Most Restrictive Target amongst the EBD based targets.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="No SvL defined"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition><PreCondition>MA.TargetSpeed != 0.0</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="Before SvL"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition><PreCondition>MA.TargetSpeed == 0.0</PreCondition><PreCondition>Distance &lt; SvL().Location</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="After SvL"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Implemented="TRUE"
 Name="CreateReleaseSpeed"
>
<ReqRef
 Id="7.5.1.168"
>
</ReqRef><ReqRef
 Id="3.13.9.4.3"
>
</ReqRef><ReqRef
 Id="7.5.1.169.bis"
>
</ReqRef><ReqRef
 Id="7.5.1.168.bis"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Default.MessageTypes.Speed"
 Name="Speed"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="ComputeOnBoard"
>
<PreConditions>
<PreCondition>Speed == 126</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.ComputeReleaseSpeedOnBoard</Expression>
</Case><Case
 Name="UseNationalValue"
>
<PreConditions>
<PreCondition>Speed == 127</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.UseNVForReleaseSpeed</Expression>
</Case><Case
 Name="ReleaseSpeedValue"
>
<Expression>MessageTypes.SpeedResolution ( Speed, 5.0 )</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="IsSvL"
>
<ReqRef
 Id="3.13.10.4.2"
>
</ReqRef><Comment>Indicates if a target is a supervision limit.</Comment>
<Parameters>
<Parameter
 Type="SpeedAndDistanceMonitoring.TargetSupervision.Target"
 Name="aTarget"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="EOA"
>
<PreConditions>
<PreCondition>MA.EndSection.DangerPoint == EMPTY</PreCondition><PreCondition>MA.EndSection.Overlap == EMPTY</PreCondition><PreCondition>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>aTarget.Location == EndOfMovementAuthority().Location AND aTarget.Speed == 0.0</Expression>
</Case><Case
 Name="Danger point"
>
<PreConditions>
<PreCondition>MA.TargetSpeed == 0.0</PreCondition><PreCondition>MA.EndSection.DangerPoint != EMPTY</PreCondition><PreCondition>MA.EndSection.Overlap == EMPTY</PreCondition></PreConditions>
<Expression>aTarget.Location == DangerPointLocation() AND aTarget.Speed == 0.0</Expression>
</Case><Case
 Name="Overlap"
>
<PreConditions>
<PreCondition>MA.EndSection.Overlap != EMPTY</PreCondition><PreCondition>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>aTarget.Location == OverlapLocation() AND aTarget.Speed == 0.0</Expression>
</Case><Case
 Name="No SvL defined"
>
<Expression>False</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="IsEOA"
>
<ReqRef
 Id="3.13.10.4.2"
>
</ReqRef><Comment>Indicates if a target is an end of authority.</Comment>
<Parameters>
<Parameter
 Type="SpeedAndDistanceMonitoring.TargetSupervision.Target"
 Name="aTarget"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="EOA defined"
>
<PreConditions>
<PreCondition>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>aTarget.Speed == 0.0 AND aTarget.Location == EndOfMovementAuthority().Location</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>False</Expression>
</Case></Cases>
</Function><Function
 Type="SpeedAndDistanceMonitoring.TargetSupervision.Target"
 Implemented="TRUE"
 Name="SvL"
>
<ReqRef
 Id="3.8.4.5.1"
>
</ReqRef><ReqRef
 Id="3.8.4.5.2"
>
</ReqRef><ReqRef
 Id="5.9.3.5"
>
</ReqRef><ReqRef
 Id="5.7.3.4"
>
</ReqRef><ReqRef
 Id="5.19.3.5"
>
</ReqRef><ReqRef
 Id="3.12.2.4"
>
</ReqRef><ReqRef
 Id="3.12.2.10"
>
</ReqRef><Comment></Comment>
<Cases>
<Case
 Name="Route suitability SvL defined"
>
<PreConditions>
<PreCondition>TrackDescription.RouteSuitability.SvL() != EMPTY</PreCondition></PreConditions>
<Expression>TrackDescription.RouteSuitability.SvL()</Expression>
</Case><Case
 Name="Mode Profile SvL defined"
>
<PreConditions>
<PreCondition>ModeProfile.SvL() != EMPTY</PreCondition></PreConditions>
<Expression>ModeProfile.SvL()</Expression>
</Case><Case
 Name="SvL defined, overlap"
>
<PreConditions>
<PreCondition>MA.TargetSpeed == 0.0</PreCondition><PreCondition>MA.EndSection.Overlap != EMPTY</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Location =&gt; OverlapLocation(),
    Speed =&gt; 0.0,
    Length =&gt; BaseTypes.Length.Infinity
}</Expression>
</Case><Case
 Name="SvL defined, danger point"
>
<PreConditions>
<PreCondition>MA.TargetSpeed == 0.0</PreCondition><PreCondition>MA.EndSection.DangerPoint != EMPTY</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Location =&gt; DangerPointLocation(),
    Speed =&gt; 0.0,
    Length =&gt; BaseTypes.Length.Infinity
}</Expression>
</Case><Case
 Name="SvL defined, end of authority"
>
<PreConditions>
<PreCondition>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>SpeedAndDistanceMonitoring.TargetSupervision.Target
{
    Location =&gt; EndOfMovementAuthority().Location,
    Speed =&gt; 0.0,
    Length =&gt; BaseTypes.Length.Infinity
}</Expression>
</Case><Case
 Name="No SvL"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="Section"
 Implemented="TRUE"
 Name="ConsiderSectionForInfill"
>
<ReqRef
 Id="3.8.5.1.b"
>
</ReqRef><Comment>This function decides if the current section shall be removed when an infill MA is received. There is three possible cases:
 - The section is situated before the infill location, in this case it is kept;
 - The section is situated after the infill location, in this case it is removed;
 - The infill location is situated on the section, in this case the section is cut at the infill location.</Comment>
<Parameters>
<Parameter
 Type="Section"
 Name="aSection"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="InfillDistance"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Section before infill distance"
>
<PreConditions>
<PreCondition>AbsoluteDistance ( aSection ) + BaseTypes.LengthToDistance ( aSection.Length ) &lt;= InfillDistance</PreCondition></PreConditions>
<Expression>aSection</Expression>
</Case><Case
 Name="Section on infill distance"
>
<PreConditions>
<PreCondition>AbsoluteDistance ( aSection ) &lt; InfillDistance</PreCondition><PreCondition>InfillDistance &lt; AbsoluteDistance ( aSection ) + BaseTypes.LengthToDistance  ( aSection.Length )</PreCondition></PreConditions>
<Expression>Section
{
    Length =&gt; BaseTypes.LengthToDistance ( InfillDistance - AbsoluteDistance ( aSection ) ),
    TimeOut =&gt; aSection.TimeOut
}</Expression>
</Case><Case
 Name="Section after infill distance"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Implemented="TRUE"
 Name="AbsoluteDistance"
>
<ReqRef
 Id="3.8.5.1.b"
>
</ReqRef><Comment>Provides the absolute distance (from the LRBG) to the beginning of the given section.</Comment>
<Parameters>
<Parameter
 Type="Section"
 Name="aSection"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>SUM
    MA.Sections |
        Before ( ExpectedFirst =&gt; X, ExpectedSecond =&gt; aSection, Collection =&gt; MA.Sections)
USING
    Default.BaseTypes.LengthToDistance ( X.Length )</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 NeedsRequirement="FALSE"
 Name="ConvertMALvl2or3_to_MALvl1"
>
<ReqRef
 Id="7.4.2.4"
>
</ReqRef><ReqRef
 Id="7.4.2.4.bis"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.Message"
 Name="MALvl2or3"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
>
<Expression>Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message
{
    NID_PACKET =&gt; MALvl2or3.NID_PACKET,
    Q_DIR =&gt; MALvl2or3.Q_DIR,
    L_PACKET =&gt; MALvl2or3.L_PACKET,
    Q_SCALE =&gt; MALvl2or3.Q_SCALE,
    V_MAIN =&gt; 0,
    V_LOA =&gt; MALvl2or3.V_LOA,
    T_LOA =&gt; MALvl2or3.T_LOA,
    N_ITER =&gt; MALvl2or3.N_ITER,
    Sequence1 =&gt; MAP MALvl2or3.Sequence1 USING ConvertSectionLvl2or3_to_SectionLvl1 ( X ),
    L_ENDSECTION =&gt; MALvl2or3.L_ENDSECTION,
    Q_SECTIONTIMER =&gt; MALvl2or3.Q_SECTIONTIMER,
    T_SECTIONTIMER =&gt; MALvl2or3.T_SECTIONTIMER,
    D_SECTIONTIMERSTOPLOC =&gt; MALvl2or3.D_SECTIONTIMERSTOPLOC,
    Q_ENDTIMER =&gt; MALvl2or3.Q_ENDTIMER,
    T_ENDTIMER =&gt; MALvl2or3.T_ENDTIMER,
    D_ENDTIMERSTARTLOC =&gt; MALvl2or3.D_ENDTIMERSTARTLOC,
    Q_DANGERPOINT =&gt; MALvl2or3.Q_DANGERPOINT,
    D_DP =&gt; MALvl2or3.D_DP,
    V_RELEASEDP =&gt; MALvl2or3.V_RELEASEDP,
    Q_OVERLAP =&gt; MALvl2or3.Q_OVERLAP,
    D_STARTOL =&gt; MALvl2or3.D_STARTOL,
    T_OL =&gt; MALvl2or3.T_OL,
    D_OL =&gt; MALvl2or3.D_OL,
    V_RELEASEOL =&gt; MALvl2or3.V_RELEASEOL
}</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="FullTrackDescriptionAvailable"
>
<ReqRef
 Id="3.7.2.3"
>
</ReqRef><ReqRef
 Id="A1.1.6.2"
>
</ReqRef><ReqRef
 Id="A1.1.6.3"
>
</ReqRef><Comment>&quot;given together with the MA&quot; is not considered here because A1.1.6.2 ensures all relevant information has been processed at the time of evaluation of this function #morido, 13/10/23</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="SSP does not cover required length"
>
<PreConditions>
<PreCondition>SUM Kernel.TrackDescription.StaticSpeedProfile.SSP USING X.Distance &lt; 
Default.BaseTypes.LengthToDistance(
   Default.MessageTypes.QScaleLength(
      length =&gt; (SUM Packet.Sequence1 USING X.L_SECTION) + Packet.L_ENDSECTION,
      scale =&gt; Packet.Q_SCALE
      )
   )</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="Gradient information does not cover required length"
>
<PreConditions>
<PreCondition>Kernel.TrackDescription.Gradient.GradientEnd(Current =&gt; LAST_IN Kernel.TrackDescription.Gradient.Gradients) &lt;
Default.BaseTypes.LengthToDistance(
   Default.MessageTypes.QScaleLength(
      length =&gt; (SUM Packet.Sequence1 USING X.L_SECTION) + Packet.L_ENDSECTION,
      scale =&gt; Packet.Q_SCALE
      )
   )</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="Otherwise"
>
<Expression>True</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Implemented="TRUE"
 Name="AcceptMA"
>
<ReqRef
 Id="3.8.4.6.2"
>
</ReqRef><ReqRef
 Id="3.8.4.6.4"
>
</ReqRef><ReqRef
 Id="Entry 5.11.2.2.A035"
>
</ReqRef><Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="YES"
>
<PreConditions>
<PreCondition>FullTrackDescriptionAvailable(Packet =&gt; Packet)</PreCondition><PreCondition>Mode != Mode.TR</PreCondition><PreCondition>(
  Infill.Data == EMPTY
    OR
    ( Infill.Data != EMPTY
      AND
    Kernel.Mode in [ Mode.FS, Mode.LS ] 
      AND
    BTM.Linking.DistanceToBaliseGroup ( Infill.Data.NID_BG ) != BaseTypes.Distance.Unknown
  )
)</PreCondition></PreConditions>
<Expression>Boolean.True</Expression>
</Case><Case
 Name="NO"
>
<Expression>Boolean.False</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MALvl2or3Received"
>
<ReqRef
 Id="7.4.2.4"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.7.1.1.a"
>
</ReqRef><Comment>Determines for which direction is applicable the received MA and calls the appropriate procedure to update the appropriate MA.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
>
</Parameter><Parameter
 Type="Messages.NID_BG"
 Name="NID_BG"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Store MA information"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Store MA information"
>
<PreConditions>
<PreCondition>FullTrackDescriptionAvailable(Packet =&gt;  ConvertMALvl2or3_to_MALvl1 ( Packet ))</PreCondition></PreConditions>
<Actions>
<Action>UpdateMA ( Packet =&gt; ConvertMALvl2or3_to_MALvl1 ( Packet ), NID_BG =&gt; NID_BG )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MALvl1Received"
>
<ReqRef
 Id="7.4.2.3"
>
</ReqRef><ReqRef
 Id="3.11.6.3"
>
</ReqRef><ReqRef
 Id="3.8.3.8"
>
</ReqRef><ReqRef
 Id="3.7.1.1.a"
>
</ReqRef><Comment>Determines for which direction is applicable the received MA and calls the appropriate procedure to update the appropriate MA.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
>
</Parameter><Parameter
 Type="Messages.NID_BG"
 Name="NID_BG"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 Name="Store information"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Store MA information"
>
<ReqRef
 Id="7.5.1.158"
>
</ReqRef><ReqRef
 Id="3.7.1.1.b"
>
</ReqRef><Comment></Comment>
<PreConditions>
<PreCondition>AcceptMA( Packet =&gt; Packet )</PreCondition></PreConditions>
<Actions>
<Action>UpdateMA ( Packet =&gt; Packet, NID_BG =&gt; NID_BG )</Action><Action>SignallingRelatedSpeedRestriction &lt;- MessageTypes.SpeedResolution ( speed =&gt; Packet.V_MAIN, resolution =&gt; 5.0 )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Train trip order"
>
<ReqRef
 Id="3.11.6.5"
>
</ReqRef><ReqRef
 Id="7.5.1.158.bis"
>
</ReqRef><Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Trip order received"
>
<Comment></Comment>
<PreConditions>
<PreCondition>Packet.V_MAIN == 0</PreCondition><PreCondition>Infill.Data == EMPTY</PreCondition></PreConditions>
<Actions>
<Action>SpeedAndDistanceMonitoring.TrainTripped &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="UpdateMA"
>
<ReqRef
 Id="7.4.2.3"
>
</ReqRef><ReqRef
 Id="7.4.2.3.1"
>
</ReqRef><ReqRef
 Id="3.8.5.1"
>
</ReqRef><ReqRef
 Id="3.8.5.1.1"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
>
</Parameter><Parameter
 Type="Messages.NID_BG"
 Name="NID_BG"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Store previous information"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Store previous information"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition></PreConditions>
<Actions>
<Action>ShorteningHandler &lt;- MaShorteningHandler
{
    Location =&gt; EndOfMovementAuthority().Location,
    IsSvL =&gt; IsSvL ( EndOfMovementAuthority() )
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 Name="Update common fields"
>
<ReqRef
 Id="7.4.2.3"
>
</ReqRef><ReqRef
 Id="3.8.1.1.b"
>
</ReqRef><ReqRef
 Id="7.5.1.157"
>
</ReqRef><ReqRef
 Id="3.8.5.1.a"
>
</ReqRef><Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MA was available"
>
<Comment>If MA was already available, we can directly modify its fields</Comment>
<PreConditions>
<PreCondition>MA != EMPTY</PreCondition></PreConditions>
<Actions>
<Action>MA.TargetSpeed &lt;- MessageTypes.SpeedResolution ( Packet.V_LOA, 5.0 )</Action><Action>MA.TargetSpeedTimeOut &lt;- BaseTypes.Time ( Packet.T_LOA )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA was available"
>
<Comment>If no MA was available, we have to create a new MA</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action>MA &lt;- MovementAuthority
{
    TargetSpeed =&gt; MessageTypes.SpeedResolution ( Packet.V_LOA, 5.0 ),
    TargetSpeedTimeOut =&gt; BaseTypes.Time ( Packet.T_LOA )
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Name="Handle information according to infill status"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Infill"
>
<ReqRef
 Id="3.8.5.1.b"
>
</ReqRef><ReqRef
 Id="3.8.5.1.2"
>
</ReqRef><ReqRef
 Id="3.8.4.6.3"
>
</ReqRef><PreConditions>
<PreCondition>Kernel.Infill.Data != EMPTY</PreCondition></PreConditions>
<Actions>
<Action>UpdateSectionsForInfill ( InfillDistance =&gt; BTM.Linking.DistanceToBaliseGroup ( Infill.Data.NID_BG ), Packet =&gt; Packet )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="No infill"
>
<ReqRef
 Id="3.8.5.1.a"
>
</ReqRef><PreConditions>
</PreConditions>
<Actions>
<Action>MA.ReferenceBG &lt;- NID_BG</Action><Action>MA.ReferenceBGLocation &lt;- Odometry.NominalDistance</Action></Actions>
<SubRules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update sections"
>
<ReqRef
 Id="3.8.1.1.f"
>
</ReqRef><ReqRef
 Id="3.8.3.1"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SectionsAvailable"
>
<Comment></Comment>
<PreConditions>
<PreCondition>Packet.N_ITER != 0</PreCondition></PreConditions>
<Actions>
<Action>MA.Sections &lt;- MAP Packet.Sequence1 USING CreateEFSSection ( ERTMSSection =&gt; X, Scale =&gt; Packet.Q_SCALE )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SectionsNotAvailable"
>
<PreConditions>
<PreCondition>Packet.N_ITER == 0</PreCondition></PreConditions>
<Actions>
<Action>MA.Sections &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Update end section"
>
<ReqRef
 Id="7.5.1.45"
>
</ReqRef><ReqRef
 Id="3.8.3.3"
>
</ReqRef><ReqRef
 Id="3.8.5.1.a"
>
</ReqRef><ReqRef
 Id="3.8.5.1.b"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Update end section"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>MA.EndSection.Length &lt;- MessageTypes.QScaleLength ( Packet.L_ENDSECTION, Packet.Q_SCALE )</Action></Actions>
<SubRules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionTimeOutAvailable"
>
<ReqRef
 Id="3.8.3.3.a"
>
</ReqRef><ReqRef
 Id="7.5.1.108"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionTimeOutAvailable"
>
<ReqRef
 Id="7.5.1.6"
>
</ReqRef><PreConditions>
<PreCondition>Packet.Q_ENDTIMER == Messages.Q_ENDTIMER.End_section_timer_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.EndSectionTimeOut &lt;- SectionTimeOut
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_ENDTIMERSTARTLOC, scale =&gt; Packet.Q_SCALE ),
    TimeOut =&gt; BaseTypes.Time ( Packet.T_ENDTIMER )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionTimeOutNotAvailable"
>
<PreConditions>
<PreCondition>Packet.Q_ENDTIMER == Messages.Q_ENDTIMER.No_End_section_timer_information</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.EndSectionTimeOut &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TimeOutAvailable"
>
<ReqRef
 Id="7.5.1.130"
>
</ReqRef><ReqRef
 Id="3.8.3.2.b"
>
</ReqRef><ReqRef
 Id="3.8.3.4"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TimeOutAvailable"
>
<ReqRef
 Id="7.5.1.24"
>
</ReqRef><PreConditions>
<PreCondition>Packet.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.Section_Timer_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.TimeOut &lt;- SectionTimeOut
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_SECTIONTIMERSTOPLOC, scale =&gt; Packet.Q_SCALE ),
    TimeOut =&gt; BaseTypes.Time ( Packet.T_SECTIONTIMER )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TimeOutNotAvailable"
>
<PreConditions>
<PreCondition>Packet.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.No_Section_Timer_information</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.TimeOut &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointAvailable"
>
<ReqRef
 Id="3.8.1.1.c"
>
</ReqRef><ReqRef
 Id="3.8.3.3.b"
>
</ReqRef><ReqRef
 Id="7.5.1.102"
>
</ReqRef><Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointAvailable"
>
<ReqRef
 Id="7.5.1.168"
>
</ReqRef><ReqRef
 Id="7.5.1.4"
>
</ReqRef><ReqRef
 Id="3.13.9.4.3"
>
</ReqRef><PreConditions>
<PreCondition>Packet.Q_DANGERPOINT == Messages.Q_DANGERPOINT.Danger_point_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.DangerPoint &lt;- DangerPoint
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_DP, scale =&gt; Packet.Q_SCALE ),
    ReleaseSpeed =&gt; CreateReleaseSpeed ( Packet.V_RELEASEDP )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointNotAvailable"
>
<PreConditions>
<PreCondition>Packet.Q_DANGERPOINT == Messages.Q_DANGERPOINT.No_danger_point_information</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.DangerPoint &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapAvailable"
>
<ReqRef
 Id="3.8.1.1.d"
>
</ReqRef><ReqRef
 Id="3.8.3.3.c"
>
</ReqRef><ReqRef
 Id="7.5.1.126"
>
</ReqRef><ReqRef
 Id="3.13.9.4.3"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapAvailable"
>
<ReqRef
 Id="7.5.1.26"
>
</ReqRef><ReqRef
 Id="7.5.1.169"
>
</ReqRef><ReqRef
 Id="7.5.1.19"
>
</ReqRef><Comment></Comment>
<PreConditions>
<PreCondition>Packet.Q_OVERLAP == Messages.Q_OVERLAP.Overlap_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.Overlap &lt;- Overlap
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_OL, scale =&gt; Packet.Q_SCALE ),
    ReleaseSpeed =&gt; CreateReleaseSpeed ( Packet.V_RELEASEOL ),
    TimerDistance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_STARTOL, scale =&gt; Packet.Q_SCALE ),
    TimeOut =&gt; BaseTypes.Time ( Packet.T_OL )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapNotAvailable"
>
<PreConditions>
<PreCondition>Packet.Q_OVERLAP == Messages.Q_OVERLAP.No_overlap_information</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.Overlap &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Update release speed"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Update release speed"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>Kernel.SpeedAndDistanceMonitoring.ReleaseSpeedSupervision.UpdateReleaseSpeed()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="TestMaShortening"
>
<ReqRef
 Id="3.A3.4.1.2.b"
>
</ReqRef><ReqRef
 Id="3.8.5.2.4"
>
</ReqRef><SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="TestMaShorteningRegardlessOfSvL"
>
<ReqRef
 Id="3.8.5.1.4"
>
</ReqRef><PreConditions>
<PreCondition>ShorteningHandler != EMPTY
  AND
ShorteningHandler.Location &gt; MA.EndOfMovementAuthority().Location
  AND
ShorteningHandler.IsSvL
  AND
NOT IsSvL ( MA.EndOfMovementAuthority() )</PreCondition></PreConditions>
<Actions>
<Action>HandlingOfAcceptedAndStoredInformation.ShortenedMaReceivedRegardlessOfSvL &lt;- True</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="TestMaShortening"
>
<ReqRef
 Id="3.8.5.1.3"
>
</ReqRef><PreConditions>
<PreCondition>ShorteningHandler != EMPTY
  AND
ShorteningHandler.Location &gt; MA.EndOfMovementAuthority().Location
  AND
ShorteningHandler.IsSvL
  AND
IsSvL ( MA.EndOfMovementAuthority() )</PreCondition></PreConditions>
<Actions>
<Action>HandlingOfAcceptedAndStoredInformation.ShortenedMaReceived &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 Name="UpdateSectionsForInfill"
>
<ReqRef
 Id="3.8.5.1.2"
>
</ReqRef><Comment>This function updates the MA&apos;s sections when an infill MA is received. The following steps are executed:
 - The end section of the previous MA is inserted to the list of the sections;
 - All sections situated after the infill locations are removed (if the infill location is situated in the middle of one of sections, the section is cut at that point);
 - The sections of the infill MA are insterted after the sections of the previous MA.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="InfillDistance"
>
</Parameter><Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add end section to the list of sections"
>
<Comment>The end section, if non empty, is added to the list of sections: that allows the automatic handling of all the sections.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Add end section to the list of sections"
>
<Comment></Comment>
<PreConditions>
<PreCondition>MA.EndSection.Length &gt; 0.0</PreCondition></PreConditions>
<Actions>
<Action>INSERT
Section
{
    Length =&gt; MA.EndSection.Length,
    TimeOut =&gt; MA.EndSection.TimeOut
}
IN MA.Sections</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove sections after infill location"
>
<Comment>The sections after the infill location are removed (will be replaced by the information from the infill MA).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Remove sections after infill location"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>MA.Sections &lt;- MAP MA.Sections USING ConsiderSectionForInfill ( aSection =&gt; X, InfillDistance =&gt; InfillDistance )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Insert new sections"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Insert new sections"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>APPLY ExtendSections ( aSection =&gt; X, Scale =&gt; Packet.Q_SCALE ) ON Packet.Sequence1</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 Name="ExtendSections"
>
<ReqRef
 Id="3.8.3.2"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="aSection"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Add new section"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Add new section"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>INSERT
  CreateEFSSection ( ERTMSSection =&gt; aSection, Scale =&gt; Scale )
IN
  MA.Sections</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 Implemented="TRUE"
 Name="RepositioningInformationReceived"
>
<ReqRef
 Id="3.8.5.2"
>
</ReqRef><ReqRef
 Id="3.8.5.2.4"
>
</ReqRef><Comment></Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.REPOSITIONING_INFORMATION.Message"
 Name="Packet"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="DistanceToBG"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Update current section"
>
<Comment></Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Several sections available"
>
<ReqRef
 Id="3.8.5.2.1"
>
</ReqRef><Comment></Comment>
<PreConditions>
<PreCondition>Available ( MA ) AND MA.Sections != []</PreCondition></PreConditions>
<Actions>
<Action>(FIRST_IN MA.Sections).Length &lt;- DistanceToBG + MessageTypes.QScaleLength ( length =&gt; Packet.L_SECTION, scale =&gt; Packet.Q_SCALE )</Action></Actions>
</RuleCondition><RuleCondition
 NeedsRequirement="FALSE"
 Name="One section available"
>
<PreConditions>
<PreCondition>Available ( MA )</PreCondition></PreConditions>
<Actions>
<Action>MA.EndSection.Length &lt;- DistanceToBG + MessageTypes.QScaleLength ( length =&gt; Packet.L_SECTION, scale =&gt; Packet.Q_SCALE )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="MovementAuthority"
 DefaultValue="EMPTY"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="MA"
>
<ReqRef
 Id="3.7.1.1.a"
>
</ReqRef><Comment>Represents the Movement Authority.</Comment>
</Variable><Variable
 Type="Default.BaseTypes.Speed"
 DefaultValue="Default.BaseTypes.Speed.MaxSpeed"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="SignallingRelatedSpeedRestriction"
>
<ReqRef
 Id="3.11.6"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.11.6.1"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.11.2.2.e"
>
<Comment></Comment>
</ReqRef><ReqRef
 Id="3.7.1.1.b"
>
</ReqRef><Comment>Represents the signalling related speed restriction. Value = 0 corresponds to train trip.</Comment>
</Variable><Variable
 Type="MA.MaShorteningHandler"
 DefaultValue="EMPTY"
 VariableMode="Internal"
 Implemented="TRUE"
 Name="ShorteningHandler"
>
<ReqRef
 Id="3.8.5.1.3"
>
</ReqRef><ReqRef
 Id="3.8.5.1.4"
>
</ReqRef><Comment>Allows to verify if the MA was shortened (possibly regardless of SvL location).</Comment>
</Variable></Variables>
</NameSpace>

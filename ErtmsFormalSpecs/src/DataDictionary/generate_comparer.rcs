MODULE GenerateComparer;

-- Create a valid C# name
PROCEDURE ValidName ( name )
BEGIN
  RESULT := name;
  RESULT := STR.Replace ( RESULT, "-", "_" );
  RESULT := STR.Replace ( RESULT, "/", "_" );
  RESULT := STR.Replace ( RESULT, ".", "_" );
  RESULT := STR.Replace ( RESULT, " ", "_" );
END ValidName;

-- Generates the class for the corresponding element
PROCEDURE GenerateComparisonClass ( doc )
BEGIN
  FILE1.Redirect ("src/Compare/Comparer.cs");
  FILE1.WriteList ({
`// ------------------------------------------------------------------------------
`// -- Copyright ERTMS Solutions
`// -- Licensed under the EUPL V.1.1
`// -- http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
`// --
`// -- This file is part of ERTMSFormalSpec software and documentation
`// --
`// --  ERTMSFormalSpec is free software: you can redistribute it and/or modify
`// --  it under the terms of the EUPL General Public License, v.1.1
`// --
`// -- ERTMSFormalSpec is distributed in the hope that it will be useful,
`// -- but WITHOUT ANY WARRANTY; without even the implied warranty of
`// -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
`// --
`// ------------------------------------------------------------------------------
`
`namespace DataDictionary.Compare
`{
`    using System.Collections.Generic;

`    public static class Comparer 
`    {
`
`        /// <summary>
`        /// Indicates that the GUID update should be performed only when not set (when false)
`        /// or also when the name matches (when true)
`        /// </summary>
`        public static bool GuidByName = false;
`
  });

  -- 
  -- Generate comparison methods
  -- 
  FOR element IN doc.RecursiveGetElementChildNodes("ELEMENT") DO  

    IF InheritsFrom(element, "ModelElement") THEN
      FILE1.WriteList ({
`        /// <summary>
`        /// Compares two `element.NAME` and annotates the differences on the first one
`        /// </summary>
`        /// <param name="obj"></param>
`        /// <param name="other"></param>
`        public static void compare`ValidName (element.NAME)`(Generated.`ValidName (element.NAME)` obj, Generated.`ValidName (element.NAME)` other, VersionDiff diff)
`        {
`            if ( other == null )
`            { 
`                diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aAdd, "", "", obj.Name ) );
`                return;
`            }
`
      });

      IF ( element CAN BaseElement ) AND InheritsFrom(element.BaseElement,"ModelElement") THEN
      FILE1.WriteList ({
`            compare`ValidName (element.BaseElement.NAME)` (obj, other, diff);
`
      });
      END;

      FOR field IN element.RecursiveGetElementChildNodes ("FIELD") DO
        IF ( field CAN TYPE ) OR ( field CAN ENUMTYPE ) THEN
          IF NOT IgnoreFromComparison (field) THEN
            IF ( field!TYPE = "STRING" OR field!TYPE = "PCHAR" ) THEN
              FILE1.WriteList ({
   `            if ( !CompareUtil.canonicalStringEquality(obj.get`ValidName(field.NAME)`(), other.get`ValidName(field.NAME)`()) )
   `            {
   `                diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aChange, "`field.NAME`", other.get`field.NAME`(), obj.get`field.NAME`()) );
   `            }
              });
            ELSE
              FILE1.WriteList ({
   `            if ( obj.get`ValidName(field.NAME)`() != other.get`ValidName(field.NAME)`() )
   `            {
   `                diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aChange, "`field.NAME`", other.get`field.NAME`().ToString(), obj.get`field.NAME`().ToString()) );
   `            }
              });
            END;
          END;
        ELSIF ( field CAN REFTYPE ) AND (InheritsFrom(Elements[field.REFTYPE],"ModelElement"))THEN          
          IF ( THERE_IS IN element.RecursiveGetElementChildNodes ("REPEAT") :- X.TARGET == field.NAME ) THEN
            IF Ordered ( field.REFTYPE ) THEN 
              FILE1.WriteList({
`            if ( obj.all`field.NAME`() != null )
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    int i = 0;
`                    while ( i < obj.count`field.NAME`() && i < other.count`field.NAME`() )
`                    {
`                        Generated.`field.REFTYPE` element = obj.get`field.NAME`( i );
`                        Generated.`field.REFTYPE` otherElement = other.get`field.NAME`( i );
`                        compare`field.REFTYPE` ( element, otherElement, diff );
`                        i += 1;
`                    }
`                    while ( i < obj.count`field.NAME`() )
`                    {
`                        diff.appendChanges ( new Diff(obj.get`field.NAME`(i), HistoricalData.Generated.acceptor.ChangeOperationEnum.aAdd, "`field.NAME`", "", obj.get`field.NAME`( i ).Name ) );
`                        i += 1;
`                    }
`                    while ( i < other.count`field.NAME`() )
`                    {
`                        diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aRemove, "`field.NAME`", other.get`field.NAME`( i ).Name) );
`                        i += 1;
`                    }
`                }
`                else 
`                {
`                    foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                    {
`                        diff.appendChanges ( new Diff(subElement, HistoricalData.Generated.acceptor.ChangeOperationEnum.aAdd, "`field.NAME`", "", subElement.Name ) );
`                    }
`                }
`            }
`            else 
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                    {
`                        diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aRemove , "`field.NAME`", otherElement.Name) );
`                    }
`                }
`            }
              }); 
            ELSE
              FILE1.WriteList({
`            if ( obj.all`field.NAME`() != null )
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                    {
`                        bool compared = false;
`                        foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                        {
`                            if ( subElement.Guid == otherElement.Guid )
`                            {
`                                compare`ValidName (field.REFTYPE)` ( subElement, otherElement, diff );
`                                compared = true;
    `                            break;
`                            }
`                        }
`
`                        if ( !compared ) 
`                        {
`                            diff.appendChanges ( new Diff(subElement, HistoricalData.Generated.acceptor.ChangeOperationEnum.aAdd, "`field.NAME`", "", subElement.Name ) );
`                        }
`                    }
`
`                    foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                    {
`                        bool found = false;
`                        foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                        {
`                            if ( subElement.Guid == otherElement.Guid )
`                            {
`                                found = true;
`                                break;
`                            }
`                        }
`
`                        if ( !found )
`                        {
`                            diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aRemove , "`field.NAME`", otherElement.Name) );
`                        }
`                    }
`                }
`                else 
`                {
`                    foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                    {
`                        diff.appendChanges ( new Diff(subElement, HistoricalData.Generated.acceptor.ChangeOperationEnum.aAdd, "`field.NAME`", "", subElement.Name ) );
`                    }
`                }
`            }
`            else 
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                    {
`                        diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aRemove , "`field.NAME`", otherElement.Name) );
`                    }
`                }
`            }
              });
            END;
          ELSE
            FILE1.WriteList({
`            if ( obj.get`field.NAME`() == null )
`            {
`                if ( other.get`field.NAME`() != null )
`                {
`                    diff.appendChanges ( new Diff(obj, HistoricalData.Generated.acceptor.ChangeOperationEnum.aChange, "`field.NAME`", "" ) );
`                }
`            }
`            else
`            {
`                compare`ValidName (field.REFTYPE)` ( obj.get`field.NAME`(), other.get`field.NAME`(), diff );
`            }
            });
          END; -- IF
        END; -- IF
      END; -- FOR field
      FILE1.WriteList ({
`        }
`
      });
    END; -- IF
  END; -- FOR element

  --
  -- Ensure all elements have a GUID and that the GUID match
  -- 
  FOR element IN doc.RecursiveGetElementChildNodes("ELEMENT") DO  

    IF InheritsFrom(element, "ModelElement") THEN
      FILE1.WriteList ({
`        /// <summary>
`        /// Ensures that two `element.NAME` have matching GUID, and recursively.
`        /// obj is the leader for Guid. If other doesn't match obj guid, 
`        ///   1. other does not have a guid, in that case, other should have the same guid as obj
`        ///   2. other already has a guid. In that case, there is a mismatch between objects, and the process stops here
`        /// </summary>
`        /// <param name="obj"></param>
`        /// <param name="other"></param>
`        public static void ensureGuid`ValidName (element.NAME)`(Generated.`ValidName (element.NAME)` obj, Generated.`ValidName (element.NAME)` other)
`        {
`            if ( obj == null )
`            { 
`                if ( other != null )
`                {
`                    // Side effect, setup a GUID if needed for the other part (other)
`                    string guid = other.Guid;
`                }
`                return;
`            }
`
`            if ( other == null )
`            { 
`                if ( obj != null )
`                {
`                    // Side effect, setup a GUID if needed for the other part (obj)
`                    string guid = obj.Guid;
`                }
`                return;
`            }
`
`            if ( obj.Guid != other.getGuid() )
`            { 
`                if ( string.IsNullOrEmpty(other.getGuid()) || GuidByName && (obj.Name == other.Name) )
`                {
`                    // These are matching elements, copy the guid from  obj
`                    other.setGuid ( obj.Guid );
`                }
`                else 
`                {
`                    // Elements do not match. Stop the recursive process
`                    return;
`                }
`            }
`
      });

      IF ( element CAN BaseElement ) AND InheritsFrom(element.BaseElement,"ModelElement") THEN
      FILE1.WriteList ({
`            ensureGuid`ValidName (element.BaseElement.NAME)` (obj, other);
`
      });
      END;

      FOR field IN element.RecursiveGetElementChildNodes ("FIELD") DO
        IF ( field CAN REFTYPE ) AND (InheritsFrom(Elements[field.REFTYPE],"ModelElement"))THEN          
          IF ( THERE_IS IN element.RecursiveGetElementChildNodes ("REPEAT") :- X.TARGET == field.NAME ) THEN
            IF Ordered ( field.REFTYPE ) THEN 
              FILE1.WriteList({
`            if ( obj.all`field.NAME`() != null )
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    int i = 0;
`                    while ( i < obj.count`field.NAME`() && i < other.count`field.NAME`() )
`                    {
`                        Generated.`field.REFTYPE` element = obj.get`field.NAME`( i );
`                        Generated.`field.REFTYPE` otherElement = other.get`field.NAME`( i );
`                        ensureGuid`field.REFTYPE` ( element, otherElement );
`                        i += 1;
`                    }
`                    while ( i < obj.count`field.NAME`() )
`                    {
`                        Generated.`field.REFTYPE` element = obj.get`field.NAME`( i );
`                        ensureGuid`field.REFTYPE` ( element, null );
`                        i += 1;
`                    }
`                    while ( i < other.count`field.NAME`() )
`                    {
`                        Generated.`field.REFTYPE` otherElement = other.get`field.NAME`( i );
`                        ensureGuid`field.REFTYPE` ( null, otherElement );
`                        i += 1;
`                    }
`                }
`                else 
`                {
`                    foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                    {
`                        ensureGuid`field.REFTYPE` ( subElement, null );
`                    }
`                }
`            }
`            else 
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                    {
`                        ensureGuid`field.REFTYPE` ( null, otherElement );
`                    }
`                }
`            }
              }); 
            ELSE
              FILE1.WriteList({
`            if ( obj.all`field.NAME`() != null )
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                    {
`                        bool found = false;
`
`                        // Try first to assign Guid to elements which do not have a guid
`                        // This helps handling duplicated in lists
`                        foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                        {
`                            if ( CompareUtil.canonicalStringEquality(subElement.`Identifier(field.REFTYPE)`, otherElement.`Identifier(field.REFTYPE)`) && otherElement.getGuid() == null )
`                            {
`                                ensureGuid`field.REFTYPE` ( subElement, otherElement );
`                                found = true;
`                                break;
`                            }
`                        }
`
`                        if ( !found ) 
`                        {
`                            foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                            {
`                                if ( CompareUtil.canonicalStringEquality(subElement.`Identifier(field.REFTYPE)`, otherElement.`Identifier(field.REFTYPE)`) )
`                                {
`                                    ensureGuid`field.REFTYPE` ( subElement, otherElement );
`                                    found = true;
`                                    break;
`                                }
`                            }
`                        }
`
`                        if ( !found ) 
`                        {
`                            ensureGuid`field.REFTYPE` ( subElement, null );
`                        }
`                    }
`
`                    foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                    {
`                        bool found = false;
`                        foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                        {
`                            if ( CompareUtil.canonicalStringEquality(subElement.`Identifier(field.REFTYPE)`, otherElement.`Identifier(field.REFTYPE)`) )
`                            {
`                                found = true;
`                                break;
`                            }
`                        }
`
`                        if ( !found )
`                        {
`                            ensureGuid`field.REFTYPE` ( null, otherElement );
`                        }
`                    }
`                }
`                else 
`                {
`                    foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                    {
`                        ensureGuid`field.REFTYPE` ( subElement, null );
`                    }
`                }
`            }
`            else 
`            {
`                if ( other.all`field.NAME`() != null ) 
`                {
`                    foreach ( Generated.`field.REFTYPE` otherElement in other.all`field.NAME`() )
`                    {
`                        ensureGuid`field.REFTYPE` ( null, otherElement );
`                    }
`                }
`            }
              });
            END;
          ELSE
            FILE1.WriteList({
`            ensureGuid`field.REFTYPE` ( obj.get`field.NAME`(), other.get`field.NAME`() );
            });
          END; -- IF
        END; -- IF
      END; -- FOR field
      FILE1.WriteList ({
`        }
`
      });
    END; -- IF
  END; -- FOR element


  FOR element IN doc.RecursiveGetElementChildNodes("ELEMENT") DO  

    IF InheritsFrom(element, "ModelElement") THEN
      FILE1.WriteList ({
`        /// <summary>
`        /// Searches a specific string in `element.NAME` and updates the list 
`        /// of model element with all the elements in which that string is found
`        /// </summary>
`        /// <param name="obj"></param>
`        /// <param name="obj">The string to search for</param>
`        /// <param name="occurences">The list of model elements which hold the searched string</param>
`        public static void search`ValidName (element.NAME)`(Generated.`ValidName (element.NAME)` obj, string searchString, List<ModelElement> occurences)
`        {
      });

      IF ( element CAN BaseElement ) AND InheritsFrom(element.BaseElement,"ModelElement") THEN
      FILE1.WriteList ({
`            search`ValidName (element.BaseElement.NAME)` (obj, searchString, occurences);
`
      });
      END;

      FOR field IN element.RecursiveGetElementChildNodes ("FIELD") DO
        IF ( field CAN TYPE ) OR ( field CAN ENUMTYPE ) THEN
          IF ( field!TYPE = "STRING" OR field!TYPE = "PCHAR" ) THEN
            FILE1.WriteList ({
`            if ( obj.get`ValidName(field.NAME)`() != null && obj.get`ValidName(field.NAME)`().Contains (searchString) ) 
`            {
`                occurences.Add ( obj );
`            }
            });
          END;
        ELSIF ( field CAN REFTYPE ) AND (InheritsFrom(Elements[field.REFTYPE],"ModelElement"))THEN          
          IF ( THERE_IS IN element.RecursiveGetElementChildNodes ("REPEAT") :- X.TARGET == field.NAME ) THEN
            FILE1.WriteList({
`            if ( obj.all`field.NAME`() != null )
`            {
`                foreach ( Generated.`field.REFTYPE` subElement in obj.all`field.NAME`() )
`                {
`                    search`ValidName (field.REFTYPE)` ( subElement, searchString, occurences );
`                }
`            }
            }); 
          ELSE
            FILE1.WriteList({
`            if ( obj.get`field.NAME`() != null )
`            {
`                search`ValidName (field.REFTYPE)` ( obj.get`field.NAME`(), searchString, occurences );
`            }
            });
          END; -- IF
        END; -- IF
      END; -- FOR field
      FILE1.WriteList ({
`        }
`
      });
    END; -- IF
  END; -- FOR element

  FILE1.WriteList ({
`    }
`}
  });
  FILE1.Flush;
END GenerateComparisonClass;

VAR
  Elements;

-- Provides the identifier method or property
PROCEDURE Identifier ( TypeName )
BEGIN
  FOR field IN Elements[TypeName].RecursiveGetElementChildNodes("FIELD") WHILE RESULT == VOID DO
    FOR meta IN field.RecursiveGetElementChildNodes("META") WHILE RESULT == VOID DO
      IF meta.NAME = "Key" THEN
        RESULT := "get" & field.NAME & "()";
      END;
    END;
  END;

  IF RESULT = VOID THEN 
    RESULT := "Name";
  END;
END;

-- Indicates that elements of this type are ordered in their enclosing list
PROCEDURE Ordered ( TypeName )
BEGIN
  RESULT := FALSE;
  FOR meta IN Elements[TypeName].RecursiveGetElementChildNodes("META") WHILE NOT RESULT DO
    IF meta.NAME = "Ordered" THEN
      RESULT := TRUE;
    END;
  END;
END;

-- Indicates that elements of this type are ordered in their enclosing list
PROCEDURE IgnoreFromComparison( Field )
BEGIN
  RESULT := FALSE;
  FOR meta IN Field.RecursiveGetElementChildNodes("META") WHILE NOT RESULT DO
    IF meta.NAME = "DoNotCompare" THEN
      RESULT := TRUE;
    END;
  END;
END;

-- Creates the symbol table for the elements of the system
PROCEDURE PopulateSymbols( doc )
BEGIN
  Elements := ASSOC.New;
  FOR IN doc.RecursiveGetElementChildNodes("ELEMENT") DO
    Elements[X.NAME] := X;
  END;
END PopulateSymbols;

PROCEDURE CreateClassHierarchy ( doc )
BEGIN
  FOR IN doc.RecursiveGetElementChildNodes("ELEMENT") DO
    IF X CAN BASEELEMENT THEN
      X.BaseElement := Elements[X.BASEELEMENT];
    END;
  END;
END;

PROCEDURE InheritsFrom(Element, BaseElement)
VAR 
  current;
BEGIN
  RESULT := FALSE;
  current := Element;
  WHILE ( current <> VOID ) AND NOT RESULT DO
    -- OUT.WriteLn (' -- ' & current.NAME &' '& current!BASECLASS &' =?= '& BaseElement &' -> '& RESULT);
    RESULT := current!BASECLASS == BaseElement;
    current := current!BaseElement;
  END;
  -- OUT.WriteLn (' -- ' & Element &' =?= '& BaseElement &' -> '& RESULT);
END;

PROCEDURE TERMINATE;
VAR 
  doc;
BEGIN
  OUT.WriteLn ("Starting process");
  doc := XML.LoadFile ( SYS.Args[1] );
  OUT.WriteLn ("XML document read");
  IF doc <> VOID THEN
    doc := doc.GetDocumentElement;

    OUT.WriteLn ("Populate symbols");
    PopulateSymbols( doc );

    OUT.WriteLn ("Create class hierarchy");
    CreateClassHierarchy ( doc );

    OUT.WriteLn ("Generate comparer class");
    GenerateComparisonClass ( doc );
    
  ELSE
    ERR.WriteLn ( "Cannot read file " & SYS.Args[1] );
  END;

  OUT.WriteLn ("Done");
END TERMINATE;

